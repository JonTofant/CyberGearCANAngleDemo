
CyberGearConfigurator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004904  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08004ad4  08004ad4  00005ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c30  08004c30  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004c30  08004c30  00005c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c38  08004c38  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c38  08004c38  00005c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c3c  08004c3c  00005c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004c40  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000060  08004ca0  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20000264  08004ca0  00006264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4f7  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf0  00000000  00000000  00011587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  00013278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ec  00000000  00000000  00013b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021641  00000000  00000000  00014274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8d4  00000000  00000000  000358b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caeaa  00000000  00000000  00041189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c033  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d0  00000000  00000000  0010c078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0010ea48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004abc 	.word	0x08004abc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08004abc 	.word	0x08004abc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08e      	sub	sp, #56	@ 0x38
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fd1d 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f863 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f92f 	bl	8000820 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 f903 	bl	80007cc <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80005c6:	f000 f8cb 	bl	8000760 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  // UART
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 80005ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000674 <main+0xc4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	68da      	ldr	r2, [r3, #12]
 80005d0:	4b28      	ldr	r3, [pc, #160]	@ (8000674 <main+0xc4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80005d8:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80005da:	4b26      	ldr	r3, [pc, #152]	@ (8000674 <main+0xc4>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	68da      	ldr	r2, [r3, #12]
 80005e0:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <main+0xc4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f042 0220 	orr.w	r2, r2, #32
 80005e8:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_IT(&huart2, &RxSingleByte, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	4922      	ldr	r1, [pc, #136]	@ (8000678 <main+0xc8>)
 80005ee:	4821      	ldr	r0, [pc, #132]	@ (8000674 <main+0xc4>)
 80005f0:	f002 fe49 	bl	8003286 <HAL_UART_Receive_IT>
  char buffer[11] = "CyberGear Serial CAN Receiver\n";
 80005f4:	4a21      	ldr	r2, [pc, #132]	@ (800067c <main+0xcc>)
 80005f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80005fc:	c303      	stmia	r3!, {r0, r1}
 80005fe:	801a      	strh	r2, [r3, #0]
 8000600:	3302      	adds	r3, #2
 8000602:	0c12      	lsrs	r2, r2, #16
 8000604:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit_IT(&huart2,(uint8_t *) buffer, 11);
 8000606:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800060a:	220b      	movs	r2, #11
 800060c:	4619      	mov	r1, r3
 800060e:	4819      	ldr	r0, [pc, #100]	@ (8000674 <main+0xc4>)
 8000610:	f002 fe03 	bl	800321a <HAL_UART_Transmit_IT>
  // CAN
  // 1) Configure the CAN filter to accept *all* extended frames
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterBank = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterIdLow  = 0x0000;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterMaskIdLow  = 0x0000;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterActivation = ENABLE;
 8000634:	2301      	movs	r3, #1
 8000636:	627b      	str	r3, [r7, #36]	@ 0x24
  sFilterConfig.SlaveStartFilterBank = 14;
 8000638:	230e      	movs	r3, #14
 800063a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4619      	mov	r1, r3
 8000640:	480f      	ldr	r0, [pc, #60]	@ (8000680 <main+0xd0>)
 8000642:	f000 fe69 	bl	8001318 <HAL_CAN_ConfigFilter>



  // 2) Start CAN
  HAL_CAN_Start(&hcan1);
 8000646:	480e      	ldr	r0, [pc, #56]	@ (8000680 <main+0xd0>)
 8000648:	f000 ff46 	bl	80014d8 <HAL_CAN_Start>



  // 3) Optionally enable Rx interrupt
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800064c:	2102      	movs	r1, #2
 800064e:	480c      	ldr	r0, [pc, #48]	@ (8000680 <main+0xd0>)
 8000650:	f001 f978 	bl	8001944 <HAL_CAN_ActivateNotification>


  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	2014      	movs	r0, #20
 800065a:	f001 fca4 	bl	8001fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800065e:	2014      	movs	r0, #20
 8000660:	f001 fcbd 	bl	8001fde <HAL_NVIC_EnableIRQ>
  getMotorDeviceID(0xFE, 0x7F);   // type=0 request
 8000664:	217f      	movs	r1, #127	@ 0x7f
 8000666:	20fe      	movs	r0, #254	@ 0xfe
 8000668:	f000 f9c4 	bl	80009f4 <getMotorDeviceID>
	  //HAL_Delay(20);

	  //motorEnable(0xFE, 0x7F);  // type=3
	  //HAL_Delay(10);

	  testMotor();
 800066c:	f000 fae2 	bl	8000c34 <testMotor>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <main+0xc0>
 8000674:	200000a4 	.word	0x200000a4
 8000678:	20000110 	.word	0x20000110
 800067c:	08004ad4 	.word	0x08004ad4
 8000680:	2000007c 	.word	0x2000007c

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	@ 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	2234      	movs	r2, #52	@ 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f003 fd92 	bl	80041bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000758 <SystemClock_Config+0xd4>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	4a29      	ldr	r2, [pc, #164]	@ (8000758 <SystemClock_Config+0xd4>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b8:	4b27      	ldr	r3, [pc, #156]	@ (8000758 <SystemClock_Config+0xd4>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c4:	2300      	movs	r3, #0
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	4b24      	ldr	r3, [pc, #144]	@ (800075c <SystemClock_Config+0xd8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006d0:	4a22      	ldr	r2, [pc, #136]	@ (800075c <SystemClock_Config+0xd8>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b20      	ldr	r3, [pc, #128]	@ (800075c <SystemClock_Config+0xd8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006f8:	2310      	movs	r3, #16
 80006fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006fc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000700:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000702:	2304      	movs	r3, #4
 8000704:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4618      	mov	r0, r3
 8000714:	f002 fa08 	bl	8002b28 <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800071e:	f000 fae5 	bl	8000cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	230f      	movs	r3, #15
 8000724:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	2302      	movs	r3, #2
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2102      	movs	r1, #2
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fea8 	bl	8002494 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800074a:	f000 facf 	bl	8000cec <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	@ 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000764:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <MX_CAN1_Init+0x64>)
 8000766:	4a18      	ldr	r2, [pc, #96]	@ (80007c8 <MX_CAN1_Init+0x68>)
 8000768:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800076a:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <MX_CAN1_Init+0x64>)
 800076c:	2202      	movs	r2, #2
 800076e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000770:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <MX_CAN1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000776:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <MX_CAN1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 800077c:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_CAN1_Init+0x64>)
 800077e:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000782:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_CAN1_Init+0x64>)
 8000786:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 800078a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800078c:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <MX_CAN1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000792:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_CAN1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <MX_CAN1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_CAN1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <MX_CAN1_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_CAN1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <MX_CAN1_Init+0x64>)
 80007b2:	f000 fcb5 	bl	8001120 <HAL_CAN_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007bc:	f000 fa96 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2000007c 	.word	0x2000007c
 80007c8:	40006400 	.word	0x40006400

080007cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d0:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	@ (800081c <MX_USART2_UART_Init+0x50>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007d8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80007dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 8000804:	f002 fc2e 	bl	8003064 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800080e:	f000 fa6d 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000a4 	.word	0x200000a4
 800081c:	40004400 	.word	0x40004400

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b35      	ldr	r3, [pc, #212]	@ (8000910 <MX_GPIO_Init+0xf0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a34      	ldr	r2, [pc, #208]	@ (8000910 <MX_GPIO_Init+0xf0>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b32      	ldr	r3, [pc, #200]	@ (8000910 <MX_GPIO_Init+0xf0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b2e      	ldr	r3, [pc, #184]	@ (8000910 <MX_GPIO_Init+0xf0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a2d      	ldr	r2, [pc, #180]	@ (8000910 <MX_GPIO_Init+0xf0>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b2b      	ldr	r3, [pc, #172]	@ (8000910 <MX_GPIO_Init+0xf0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <MX_GPIO_Init+0xf0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a26      	ldr	r2, [pc, #152]	@ (8000910 <MX_GPIO_Init+0xf0>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b24      	ldr	r3, [pc, #144]	@ (8000910 <MX_GPIO_Init+0xf0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b20      	ldr	r3, [pc, #128]	@ (8000910 <MX_GPIO_Init+0xf0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a1f      	ldr	r2, [pc, #124]	@ (8000910 <MX_GPIO_Init+0xf0>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <MX_GPIO_Init+0xf0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS485_DIR_Pin|LD1_Pin|LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	21f0      	movs	r1, #240	@ 0xf0
 80008aa:	481a      	ldr	r0, [pc, #104]	@ (8000914 <MX_GPIO_Init+0xf4>)
 80008ac:	f001 fdd8 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4814      	ldr	r0, [pc, #80]	@ (8000918 <MX_GPIO_Init+0xf8>)
 80008c8:	f001 fc36 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008cc:	2303      	movs	r3, #3
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80008dc:	2308      	movs	r3, #8
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	480b      	ldr	r0, [pc, #44]	@ (8000914 <MX_GPIO_Init+0xf4>)
 80008e8:	f001 fc26 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_DIR_Pin LD1_Pin LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = RS485_DIR_Pin|LD1_Pin|LD2_Pin|LD3_Pin;
 80008ec:	23f0      	movs	r3, #240	@ 0xf0
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	4804      	ldr	r0, [pc, #16]	@ (8000914 <MX_GPIO_Init+0xf4>)
 8000904:	f001 fc18 	bl	8002138 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	@ 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40020000 	.word	0x40020000
 8000918:	40020800 	.word	0x40020800

0800091c <writeParameter>:
 *   type=18 (0x12) in bits28..24
 */
HAL_StatusTypeDef writeParameter(uint16_t paramIndex, const volatile void* paramValue,
                                 uint8_t hostID, uint8_t motorID)

{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	@ 0x30
 8000920:	af00      	add	r7, sp, #0
 8000922:	6039      	str	r1, [r7, #0]
 8000924:	4611      	mov	r1, r2
 8000926:	461a      	mov	r2, r3
 8000928:	4603      	mov	r3, r0
 800092a:	80fb      	strh	r3, [r7, #6]
 800092c:	460b      	mov	r3, r1
 800092e:	717b      	strb	r3, [r7, #5]
 8000930:	4613      	mov	r3, r2
 8000932:	713b      	strb	r3, [r7, #4]
    CAN_TxHeaderTypeDef txHeader;
    uint32_t txMailbox;
    uint8_t txData[8] = {0};
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]

    // Build extended ID => (type=18)
    uint32_t extId = ((uint32_t)0x12 << 24)
                   | ((uint32_t)hostID << 8)
 800093c:	797b      	ldrb	r3, [r7, #5]
 800093e:	021a      	lsls	r2, r3, #8
                   | (uint32_t)motorID;
 8000940:	793b      	ldrb	r3, [r7, #4]
 8000942:	4313      	orrs	r3, r2
    uint32_t extId = ((uint32_t)0x12 << 24)
 8000944:	f043 5390 	orr.w	r3, r3, #301989888	@ 0x12000000
 8000948:	62fb      	str	r3, [r7, #44]	@ 0x2c

    txHeader.ExtId = extId;
 800094a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800094c:	61bb      	str	r3, [r7, #24]
    txHeader.IDE   = CAN_ID_EXT;
 800094e:	2304      	movs	r3, #4
 8000950:	61fb      	str	r3, [r7, #28]
    txHeader.RTR   = CAN_RTR_DATA;
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
    txHeader.DLC   = 8;
 8000956:	2308      	movs	r3, #8
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.TransmitGlobalTime = DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    // Byte0..1 = paramIndex (little-endian)
    txData[0] = (uint8_t)(paramIndex & 0xFF);
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	723b      	strb	r3, [r7, #8]
    txData[1] = (uint8_t)(paramIndex >> 8);
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	b29b      	uxth	r3, r3
 800096c:	b2db      	uxtb	r3, r3
 800096e:	727b      	strb	r3, [r7, #9]
    // Byte2..3 = 0
    // Byte4..7 = paramValue
    memcpy(&txData[4], paramValue, 4);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	60fb      	str	r3, [r7, #12]

    return HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, &txMailbox);
 8000976:	f107 0310 	add.w	r3, r7, #16
 800097a:	f107 0208 	add.w	r2, r7, #8
 800097e:	f107 0114 	add.w	r1, r7, #20
 8000982:	4804      	ldr	r0, [pc, #16]	@ (8000994 <writeParameter+0x78>)
 8000984:	f000 fdec 	bl	8001560 <HAL_CAN_AddTxMessage>
 8000988:	4603      	mov	r3, r0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3730      	adds	r7, #48	@ 0x30
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000007c 	.word	0x2000007c

08000998 <motorEnable>:

/**
 * Enable motor => type=3
 */
HAL_StatusTypeDef motorEnable(uint8_t hostID, uint8_t motorID)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08c      	sub	sp, #48	@ 0x30
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	460a      	mov	r2, r1
 80009a2:	71fb      	strb	r3, [r7, #7]
 80009a4:	4613      	mov	r3, r2
 80009a6:	71bb      	strb	r3, [r7, #6]
    CAN_TxHeaderTypeDef txHeader;
    uint8_t txData[8] = {0};
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	2300      	movs	r3, #0
 80009ae:	613b      	str	r3, [r7, #16]
    uint32_t txMailbox;

    uint32_t extId = ((uint32_t)3 << 24) |
                     ((uint32_t)hostID << 8) |
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	021a      	lsls	r2, r3, #8
 80009b4:	79bb      	ldrb	r3, [r7, #6]
 80009b6:	4313      	orrs	r3, r2
    uint32_t extId = ((uint32_t)3 << 24) |
 80009b8:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 80009bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                     motorID;

    txHeader.ExtId = extId;
 80009be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009c0:	61bb      	str	r3, [r7, #24]
    txHeader.IDE   = CAN_ID_EXT;
 80009c2:	2304      	movs	r3, #4
 80009c4:	61fb      	str	r3, [r7, #28]
    txHeader.RTR   = CAN_RTR_DATA;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
    txHeader.DLC   = 8;
 80009ca:	2308      	movs	r3, #8
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.TransmitGlobalTime = DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    return HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, &txMailbox);
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	f107 020c 	add.w	r2, r7, #12
 80009dc:	f107 0114 	add.w	r1, r7, #20
 80009e0:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <motorEnable+0x58>)
 80009e2:	f000 fdbd 	bl	8001560 <HAL_CAN_AddTxMessage>
 80009e6:	4603      	mov	r3, r0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3730      	adds	r7, #48	@ 0x30
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000007c 	.word	0x2000007c

080009f4 <getMotorDeviceID>:
 * Ask the motor for its device ID => type=0
 * The motor (if it hears this) should respond with type=0,
 * data=64-bit unique MCU ID, or an info frame.
 */
HAL_StatusTypeDef getMotorDeviceID(uint8_t hostID, uint8_t motorID)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	@ 0x30
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	460a      	mov	r2, r1
 80009fe:	71fb      	strb	r3, [r7, #7]
 8000a00:	4613      	mov	r3, r2
 8000a02:	71bb      	strb	r3, [r7, #6]
    CAN_TxHeaderTypeDef txHeader;
    uint32_t txMailbox;
    uint8_t txData[8] = {0};
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]

    // 0 in bits28..24 => get device ID
    uint32_t extId = ((uint32_t)0 << 24)
                   | ((uint32_t)hostID << 8)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	021a      	lsls	r2, r3, #8
                   | (uint32_t)motorID;
 8000a10:	79bb      	ldrb	r3, [r7, #6]
    uint32_t extId = ((uint32_t)0 << 24)
 8000a12:	4313      	orrs	r3, r2
 8000a14:	62fb      	str	r3, [r7, #44]	@ 0x2c

    txHeader.ExtId = extId;
 8000a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a18:	61bb      	str	r3, [r7, #24]
    txHeader.IDE   = CAN_ID_EXT;     // extended frame
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	61fb      	str	r3, [r7, #28]
    txHeader.RTR   = CAN_RTR_DATA;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
    txHeader.DLC   = 8;
 8000a22:	2308      	movs	r3, #8
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.TransmitGlobalTime = DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    // Typically data can be all 0
    memset(txData, 0, 8);
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	2208      	movs	r2, #8
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f003 fbc1 	bl	80041bc <memset>

    return HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, &txMailbox);
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	f107 0208 	add.w	r2, r7, #8
 8000a42:	f107 0114 	add.w	r1, r7, #20
 8000a46:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <getMotorDeviceID+0x64>)
 8000a48:	f000 fd8a 	bl	8001560 <HAL_CAN_AddTxMessage>
 8000a4c:	4603      	mov	r3, r0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3730      	adds	r7, #48	@ 0x30
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2000007c 	.word	0x2000007c

08000a5c <clearMotorFault>:


HAL_StatusTypeDef clearMotorFault(uint8_t hostID, uint8_t motorID)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	@ 0x30
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	460a      	mov	r2, r1
 8000a66:	71fb      	strb	r3, [r7, #7]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	71bb      	strb	r3, [r7, #6]
    CAN_TxHeaderTypeDef txHeader;
    uint32_t txMailbox;
    uint8_t txData[8] = {0};
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]

    // 4 in bits28..24 => Stop command
    uint32_t extId = ((uint32_t)4 << 24)
                   | ((uint32_t)hostID << 8)
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	021a      	lsls	r2, r3, #8
                   | (uint32_t)motorID;
 8000a78:	79bb      	ldrb	r3, [r7, #6]
 8000a7a:	4313      	orrs	r3, r2
    uint32_t extId = ((uint32_t)4 << 24)
 8000a7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a80:	62fb      	str	r3, [r7, #44]	@ 0x2c

    txHeader.ExtId = extId;
 8000a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a84:	61bb      	str	r3, [r7, #24]
    txHeader.IDE   = CAN_ID_EXT;     // extended frame
 8000a86:	2304      	movs	r3, #4
 8000a88:	61fb      	str	r3, [r7, #28]
    txHeader.RTR   = CAN_RTR_DATA;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
    txHeader.DLC   = 8;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.TransmitGlobalTime = DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    // data[0] = 1 => clear fault
    txData[0] = 1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	723b      	strb	r3, [r7, #8]

    return HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, &txMailbox);
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	f107 0208 	add.w	r2, r7, #8
 8000aa4:	f107 0114 	add.w	r1, r7, #20
 8000aa8:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <clearMotorFault+0x5c>)
 8000aaa:	f000 fd59 	bl	8001560 <HAL_CAN_AddTxMessage>
 8000aae:	4603      	mov	r3, r0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3730      	adds	r7, #48	@ 0x30
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000007c 	.word	0x2000007c

08000abc <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b0a8      	sub	sp, #160	@ 0xa0
 8000ac0:	af02      	add	r7, sp, #8
 8000ac2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    status = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &pRxHeader, received_data);
 8000ac4:	4b52      	ldr	r3, [pc, #328]	@ (8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000ac6:	4a53      	ldr	r2, [pc, #332]	@ (8000c14 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 8000ac8:	2100      	movs	r1, #0
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 fe18 	bl	8001700 <HAL_CAN_GetRxMessage>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    if (status != HAL_OK)
 8000ad6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f040 8094 	bne.w	8000c08 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>
    {
        // Error reading the message
        return;
    }

    uint32_t extId = pRxHeader.ExtId;
 8000ae0:	4b4c      	ldr	r3, [pc, #304]	@ (8000c14 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    uint8_t type   = (extId >> 24) & 0x1F;   // bits28..24
 8000ae8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000aec:	0e1b      	lsrs	r3, r3, #24
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	f003 031f 	and.w	r3, r3, #31
 8000af4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    uint8_t motorID= extId & 0xFF;          // bits7..0
 8000af8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000afc:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e

    // For debug, print the entire extended ID
    char dbg[128];
    sprintf(dbg, "RX: ExtId=0x%08lX (type=%u, motorID=%u), DLC=%u\n",
 8000b00:	f897 108f 	ldrb.w	r1, [r7, #143]	@ 0x8f
 8000b04:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8000b08:	4a42      	ldr	r2, [pc, #264]	@ (8000c14 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 8000b0a:	6912      	ldr	r2, [r2, #16]
 8000b0c:	f107 0008 	add.w	r0, r7, #8
 8000b10:	9201      	str	r2, [sp, #4]
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	460b      	mov	r3, r1
 8000b16:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000b1a:	493f      	ldr	r1, [pc, #252]	@ (8000c18 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 8000b1c:	f003 fb2e 	bl	800417c <siprintf>
            (unsigned long)extId, (unsigned)type, (unsigned)motorID, pRxHeader.DLC);
    serialWrite(dbg);
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 f8bb 	bl	8000ca0 <serialWrite>

    // Check what type we received
    if (type == 2)
 8000b2a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d119      	bne.n	8000b66 <HAL_CAN_RxFifo0MsgPendingCallback+0xaa>
    {
        // This is typically the motor feedback frame
        // Byte0..1 might be current angle, Byte2..3 velocity, Byte4..5 torque, Byte6..7 temperature, etc.
        sprintf(dbg, "Received type=2 (feedback) from motorID=%u\n", (unsigned)motorID);
 8000b32:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	4938      	ldr	r1, [pc, #224]	@ (8000c1c <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f003 fb1d 	bl	800417c <siprintf>
        serialWrite(dbg);
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f8aa 	bl	8000ca0 <serialWrite>

        // Optionally parse the data
        // e.g. parse angle:
        angle_u = (received_data[0] << 8) | received_data[1];
 8000b4c:	4b30      	ldr	r3, [pc, #192]	@ (8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	4b2e      	ldr	r3, [pc, #184]	@ (8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000b56:	785b      	ldrb	r3, [r3, #1]
 8000b58:	b21b      	sxth	r3, r3
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	b21b      	sxth	r3, r3
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	4b2f      	ldr	r3, [pc, #188]	@ (8000c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 8000b62:	801a      	strh	r2, [r3, #0]
 8000b64:	e051      	b.n	8000c0a <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
        // etc. Then print or store
    }
    else if (type == 21)
 8000b66:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000b6a:	2b15      	cmp	r3, #21
 8000b6c:	d12b      	bne.n	8000bc6 <HAL_CAN_RxFifo0MsgPendingCallback+0x10a>
    {
        // This is typically the fault/error frame
        // Byte0..3 might be a fault code
        sprintf(dbg, "Received type=21 (fault) from motorID=%u\n", (unsigned)motorID);
 8000b6e:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	492b      	ldr	r1, [pc, #172]	@ (8000c24 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 faff 	bl	800417c <siprintf>
        serialWrite(dbg);
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f88c 	bl	8000ca0 <serialWrite>

        // Optionally parse the fault code in received_data[0..3]
        // For example:
        uint32_t fault = (received_data[0])
 8000b88:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
                       | (received_data[1] << 8)
 8000b8e:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000b90:	785b      	ldrb	r3, [r3, #1]
 8000b92:	021b      	lsls	r3, r3, #8
 8000b94:	431a      	orrs	r2, r3
                       | (received_data[2] << 16)
 8000b96:	4b1e      	ldr	r3, [pc, #120]	@ (8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000b98:	789b      	ldrb	r3, [r3, #2]
 8000b9a:	041b      	lsls	r3, r3, #16
 8000b9c:	431a      	orrs	r2, r3
                       | (received_data[3] << 24);
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000ba0:	78db      	ldrb	r3, [r3, #3]
 8000ba2:	061b      	lsls	r3, r3, #24
 8000ba4:	4313      	orrs	r3, r2
        uint32_t fault = (received_data[0])
 8000ba6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        sprintf(dbg, "Fault code = 0x%08lX\n", (unsigned long)fault);
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000bb2:	491d      	ldr	r1, [pc, #116]	@ (8000c28 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f003 fae1 	bl	800417c <siprintf>
        serialWrite(dbg);
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f86e 	bl	8000ca0 <serialWrite>
 8000bc4:	e021      	b.n	8000c0a <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
    }
    else if (type == 0)
 8000bc6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10d      	bne.n	8000bea <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
    {
        // Possibly a "Get Device ID" response
        sprintf(dbg, "Received type=0 (device info) from motorID=%u\n", (unsigned)motorID);
 8000bce:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	4915      	ldr	r1, [pc, #84]	@ (8000c2c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 facf 	bl	800417c <siprintf>
        serialWrite(dbg);
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f85c 	bl	8000ca0 <serialWrite>
 8000be8:	e00f      	b.n	8000c0a <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
        // The data bytes may contain the 64-bit unique ID
    }
    else
    {
        // Some other type
        sprintf(dbg, "Received unknown type=%u from motorID=%u\n",
 8000bea:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8000bee:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8000bf2:	f107 0008 	add.w	r0, r7, #8
 8000bf6:	490e      	ldr	r1, [pc, #56]	@ (8000c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8000bf8:	f003 fac0 	bl	800417c <siprintf>
                (unsigned)type, (unsigned)motorID);
        serialWrite(dbg);
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f84d 	bl	8000ca0 <serialWrite>
 8000c06:	e000      	b.n	8000c0a <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
        return;
 8000c08:	bf00      	nop
    }
}
 8000c0a:	3798      	adds	r7, #152	@ 0x98
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000108 	.word	0x20000108
 8000c14:	200000ec 	.word	0x200000ec
 8000c18:	08004ae0 	.word	0x08004ae0
 8000c1c:	08004b14 	.word	0x08004b14
 8000c20:	20000112 	.word	0x20000112
 8000c24:	08004b40 	.word	0x08004b40
 8000c28:	08004b6c 	.word	0x08004b6c
 8000c2c:	08004b84 	.word	0x08004b84
 8000c30:	08004bb4 	.word	0x08004bb4

08000c34 <testMotor>:

void testMotor(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
    // 1) Clear fault
    clearMotorFault(/*hostID=*/0x00, /*motorID=*/0x7F);
 8000c3a:	217f      	movs	r1, #127	@ 0x7f
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff ff0d 	bl	8000a5c <clearMotorFault>
    HAL_Delay(20);
 8000c42:	2014      	movs	r0, #20
 8000c44:	f000 fa48 	bl	80010d8 <HAL_Delay>

    // 2) Enable motor
    motorEnable(/*hostID=*/0x00, /*motorID=*/0x7F);
 8000c48:	217f      	movs	r1, #127	@ 0x7f
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff fea4 	bl	8000998 <motorEnable>
    HAL_Delay(20);
 8000c50:	2014      	movs	r0, #20
 8000c52:	f000 fa41 	bl	80010d8 <HAL_Delay>


    // 2) Put motor in position mode
    uint8_t runMode = 1; // 1 => position mode
 8000c56:	2301      	movs	r3, #1
 8000c58:	71fb      	strb	r3, [r7, #7]
    writeParameter(0x7005, &runMode, /*hostID=*/0xFE, /*motorID=*/0x7F);
 8000c5a:	1df9      	adds	r1, r7, #7
 8000c5c:	237f      	movs	r3, #127	@ 0x7f
 8000c5e:	22fe      	movs	r2, #254	@ 0xfe
 8000c60:	f247 0005 	movw	r0, #28677	@ 0x7005
 8000c64:	f7ff fe5a 	bl	800091c <writeParameter>


    float speedLimit = 1.0f; // e.g. 1 rad/s
 8000c68:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000c6c:	603b      	str	r3, [r7, #0]
    writeParameter(0x7017, &speedLimit, 0xFE, 0x7F);
 8000c6e:	4639      	mov	r1, r7
 8000c70:	237f      	movs	r3, #127	@ 0x7f
 8000c72:	22fe      	movs	r2, #254	@ 0xfe
 8000c74:	f247 0017 	movw	r0, #28695	@ 0x7017
 8000c78:	f7ff fe50 	bl	800091c <writeParameter>
    HAL_Delay(10);
 8000c7c:	200a      	movs	r0, #10
 8000c7e:	f000 fa2b 	bl	80010d8 <HAL_Delay>

    // 3) Send repeated frames in a loop
    while(1)
    {

    	writeParameter(0x7016, &targetAngle, 0xFE, 0x7F);
 8000c82:	237f      	movs	r3, #127	@ 0x7f
 8000c84:	22fe      	movs	r2, #254	@ 0xfe
 8000c86:	4905      	ldr	r1, [pc, #20]	@ (8000c9c <testMotor+0x68>)
 8000c88:	f247 0016 	movw	r0, #28694	@ 0x7016
 8000c8c:	f7ff fe46 	bl	800091c <writeParameter>

        HAL_Delay(10); // ~100 Hz
 8000c90:	200a      	movs	r0, #10
 8000c92:	f000 fa21 	bl	80010d8 <HAL_Delay>
    	writeParameter(0x7016, &targetAngle, 0xFE, 0x7F);
 8000c96:	bf00      	nop
 8000c98:	e7f3      	b.n	8000c82 <testMotor+0x4e>
 8000c9a:	bf00      	nop
 8000c9c:	20000000 	.word	0x20000000

08000ca0 <serialWrite>:
    }
}



void serialWrite(char data[]){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) data, strlen(data), 10);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff fab1 	bl	8000210 <strlen>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	4806      	ldr	r0, [pc, #24]	@ (8000cd0 <serialWrite+0x30>)
 8000cb8:	f002 fa24 	bl	8003104 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,(uint8_t *)"\n",1,10);
 8000cbc:	230a      	movs	r3, #10
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4904      	ldr	r1, [pc, #16]	@ (8000cd4 <serialWrite+0x34>)
 8000cc2:	4803      	ldr	r0, [pc, #12]	@ (8000cd0 <serialWrite+0x30>)
 8000cc4:	f002 fa1e 	bl	8003104 <HAL_UART_Transmit>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200000a4 	.word	0x200000a4
 8000cd4:	08004be0 	.word	0x08004be0

08000cd8 <HAL_UART_RxCpltCallback>:
void serialProcessRxData(){

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){

	}
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <Error_Handler+0x8>

08000cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <HAL_MspInit+0x4c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	4a0f      	ldr	r2, [pc, #60]	@ (8000d44 <HAL_MspInit+0x4c>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <HAL_MspInit+0x4c>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d22:	4a08      	ldr	r2, [pc, #32]	@ (8000d44 <HAL_MspInit+0x4c>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2a:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d36:	2007      	movs	r0, #7
 8000d38:	f001 f92a 	bl	8001f90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800

08000d48 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	@ 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a1d      	ldr	r2, [pc, #116]	@ (8000ddc <HAL_CAN_MspInit+0x94>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d134      	bne.n	8000dd4 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <HAL_CAN_MspInit+0x98>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	4a1b      	ldr	r2, [pc, #108]	@ (8000de0 <HAL_CAN_MspInit+0x98>)
 8000d74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7a:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <HAL_CAN_MspInit+0x98>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <HAL_CAN_MspInit+0x98>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a14      	ldr	r2, [pc, #80]	@ (8000de0 <HAL_CAN_MspInit+0x98>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_CAN_MspInit+0x98>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000da2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000db4:	2309      	movs	r3, #9
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4809      	ldr	r0, [pc, #36]	@ (8000de4 <HAL_CAN_MspInit+0x9c>)
 8000dc0:	f001 f9ba 	bl	8002138 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2014      	movs	r0, #20
 8000dca:	f001 f8ec 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000dce:	2014      	movs	r0, #20
 8000dd0:	f001 f905 	bl	8001fde <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	@ 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40006400 	.word	0x40006400
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020400 	.word	0x40020400

08000de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	@ 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a1d      	ldr	r2, [pc, #116]	@ (8000e7c <HAL_UART_MspInit+0x94>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d133      	bne.n	8000e72 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <HAL_UART_MspInit+0x98>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	4a1b      	ldr	r2, [pc, #108]	@ (8000e80 <HAL_UART_MspInit+0x98>)
 8000e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1a:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <HAL_UART_MspInit+0x98>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <HAL_UART_MspInit+0x98>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a14      	ldr	r2, [pc, #80]	@ (8000e80 <HAL_UART_MspInit+0x98>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <HAL_UART_MspInit+0x98>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e42:	230c      	movs	r3, #12
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e52:	2307      	movs	r3, #7
 8000e54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4809      	ldr	r0, [pc, #36]	@ (8000e84 <HAL_UART_MspInit+0x9c>)
 8000e5e:	f001 f96b 	bl	8002138 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2026      	movs	r0, #38	@ 0x26
 8000e68:	f001 f89d 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e6c:	2026      	movs	r0, #38	@ 0x26
 8000e6e:	f001 f8b6 	bl	8001fde <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	@ 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40004400 	.word	0x40004400
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020000 	.word	0x40020000

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <NMI_Handler+0x4>

08000e90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <MemManage_Handler+0x4>

08000ea0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <UsageFault_Handler+0x4>

08000eb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ede:	f000 f8db 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <CAN1_RX0_IRQHandler+0x10>)
 8000eee:	f000 fd4f 	bl	8001990 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000007c 	.word	0x2000007c

08000efc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f00:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <USART2_IRQHandler+0x10>)
 8000f02:	f002 f9e5 	bl	80032d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200000a4 	.word	0x200000a4

08000f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f18:	4a14      	ldr	r2, [pc, #80]	@ (8000f6c <_sbrk+0x5c>)
 8000f1a:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <_sbrk+0x60>)
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f24:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <_sbrk+0x64>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	@ (8000f78 <_sbrk+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f32:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d207      	bcs.n	8000f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f40:	f003 f944 	bl	80041cc <__errno>
 8000f44:	4603      	mov	r3, r0
 8000f46:	220c      	movs	r2, #12
 8000f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	e009      	b.n	8000f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f50:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f56:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a05      	ldr	r2, [pc, #20]	@ (8000f74 <_sbrk+0x64>)
 8000f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20020000 	.word	0x20020000
 8000f70:	00004000 	.word	0x00004000
 8000f74:	20000114 	.word	0x20000114
 8000f78:	20000268 	.word	0x20000268

08000f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <SystemInit+0x20>)
 8000f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f86:	4a05      	ldr	r2, [pc, #20]	@ (8000f9c <SystemInit+0x20>)
 8000f88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fa4:	f7ff ffea 	bl	8000f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa8:	480c      	ldr	r0, [pc, #48]	@ (8000fdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000faa:	490d      	ldr	r1, [pc, #52]	@ (8000fe0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fac:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f003 f903 	bl	80041d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff faed 	bl	80005b0 <main>
  bx  lr    
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000fe4:	08004c40 	.word	0x08004c40
  ldr r2, =_sbss
 8000fe8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000fec:	20000264 	.word	0x20000264

08000ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8001034 <HAL_Init+0x40>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001004:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <HAL_Init+0x40>)
 800100a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800100e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	@ (8001034 <HAL_Init+0x40>)
 8001016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800101a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 ffb7 	bl	8001f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	2000      	movs	r0, #0
 8001024:	f000 f808 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fe66 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023c00 	.word	0x40023c00

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 ffcf 	bl	8001ffa <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 ff97 	bl	8001fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	@ (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000004 	.word	0x20000004
 8001090:	2000000c 	.word	0x2000000c
 8001094:	20000008 	.word	0x20000008

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	2000000c 	.word	0x2000000c
 80010bc:	20000118 	.word	0x20000118

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000118 	.word	0x20000118

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d005      	beq.n	80010fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f2:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <HAL_Delay+0x44>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fe:	bf00      	nop
 8001100:	f7ff ffde 	bl	80010c0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8f7      	bhi.n	8001100 <HAL_Delay+0x28>
  {
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000000c 	.word	0x2000000c

08001120 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e0ed      	b.n	800130e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fe02 	bl	8000d48 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0201 	orr.w	r2, r2, #1
 8001152:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001154:	f7ff ffb4 	bl	80010c0 <HAL_GetTick>
 8001158:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800115a:	e012      	b.n	8001182 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800115c:	f7ff ffb0 	bl	80010c0 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b0a      	cmp	r3, #10
 8001168:	d90b      	bls.n	8001182 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2205      	movs	r2, #5
 800117a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e0c5      	b.n	800130e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0e5      	beq.n	800115c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0202 	bic.w	r2, r2, #2
 800119e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011a0:	f7ff ff8e 	bl	80010c0 <HAL_GetTick>
 80011a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011a6:	e012      	b.n	80011ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011a8:	f7ff ff8a 	bl	80010c0 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b0a      	cmp	r3, #10
 80011b4:	d90b      	bls.n	80011ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2205      	movs	r2, #5
 80011c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e09f      	b.n	800130e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1e5      	bne.n	80011a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7e1b      	ldrb	r3, [r3, #24]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d108      	bne.n	80011f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	e007      	b.n	8001206 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001204:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7e5b      	ldrb	r3, [r3, #25]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d108      	bne.n	8001220 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	e007      	b.n	8001230 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800122e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7e9b      	ldrb	r3, [r3, #26]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d108      	bne.n	800124a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0220 	orr.w	r2, r2, #32
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e007      	b.n	800125a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0220 	bic.w	r2, r2, #32
 8001258:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	7edb      	ldrb	r3, [r3, #27]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d108      	bne.n	8001274 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0210 	bic.w	r2, r2, #16
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	e007      	b.n	8001284 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 0210 	orr.w	r2, r2, #16
 8001282:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7f1b      	ldrb	r3, [r3, #28]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d108      	bne.n	800129e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0208 	orr.w	r2, r2, #8
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	e007      	b.n	80012ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0208 	bic.w	r2, r2, #8
 80012ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7f5b      	ldrb	r3, [r3, #29]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d108      	bne.n	80012c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 0204 	orr.w	r2, r2, #4
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	e007      	b.n	80012d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0204 	bic.w	r2, r2, #4
 80012d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	431a      	orrs	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	ea42 0103 	orr.w	r1, r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	1e5a      	subs	r2, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800132e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001330:	7cfb      	ldrb	r3, [r7, #19]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d003      	beq.n	800133e <HAL_CAN_ConfigFilter+0x26>
 8001336:	7cfb      	ldrb	r3, [r7, #19]
 8001338:	2b02      	cmp	r3, #2
 800133a:	f040 80be 	bne.w	80014ba <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800133e:	4b65      	ldr	r3, [pc, #404]	@ (80014d4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001340:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001348:	f043 0201 	orr.w	r2, r3, #1
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001358:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	431a      	orrs	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f003 031f 	and.w	r3, r3, #31
 800137e:	2201      	movs	r2, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	43db      	mvns	r3, r3
 8001390:	401a      	ands	r2, r3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d123      	bne.n	80013e8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3248      	adds	r2, #72	@ 0x48
 80013c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013de:	6979      	ldr	r1, [r7, #20]
 80013e0:	3348      	adds	r3, #72	@ 0x48
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d122      	bne.n	8001436 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	431a      	orrs	r2, r3
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001410:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3248      	adds	r2, #72	@ 0x48
 8001416:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800142a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800142c:	6979      	ldr	r1, [r7, #20]
 800142e:	3348      	adds	r3, #72	@ 0x48
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	440b      	add	r3, r1
 8001434:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d109      	bne.n	8001452 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43db      	mvns	r3, r3
 8001448:	401a      	ands	r2, r3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001450:	e007      	b.n	8001462 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	431a      	orrs	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d109      	bne.n	800147e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	43db      	mvns	r3, r3
 8001474:	401a      	ands	r2, r3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800147c:	e007      	b.n	800148e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	431a      	orrs	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d107      	bne.n	80014a6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	431a      	orrs	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014ac:	f023 0201 	bic.w	r2, r3, #1
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e006      	b.n	80014c8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
  }
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	371c      	adds	r7, #28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	40006400 	.word	0x40006400

080014d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d12e      	bne.n	800154a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2202      	movs	r2, #2
 80014f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0201 	bic.w	r2, r2, #1
 8001502:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001504:	f7ff fddc 	bl	80010c0 <HAL_GetTick>
 8001508:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800150a:	e012      	b.n	8001532 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800150c:	f7ff fdd8 	bl	80010c0 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b0a      	cmp	r3, #10
 8001518:	d90b      	bls.n	8001532 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2205      	movs	r2, #5
 800152a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e012      	b.n	8001558 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1e5      	bne.n	800150c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e006      	b.n	8001558 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
  }
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	@ 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001574:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800157e:	7ffb      	ldrb	r3, [r7, #31]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d003      	beq.n	800158c <HAL_CAN_AddTxMessage+0x2c>
 8001584:	7ffb      	ldrb	r3, [r7, #31]
 8001586:	2b02      	cmp	r3, #2
 8001588:	f040 80ad 	bne.w	80016e6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10a      	bne.n	80015ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800159c:	2b00      	cmp	r3, #0
 800159e:	d105      	bne.n	80015ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 8095 	beq.w	80016d6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	0e1b      	lsrs	r3, r3, #24
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015b6:	2201      	movs	r2, #1
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10d      	bne.n	80015e4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015d2:	68f9      	ldr	r1, [r7, #12]
 80015d4:	6809      	ldr	r1, [r1, #0]
 80015d6:	431a      	orrs	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3318      	adds	r3, #24
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	440b      	add	r3, r1
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	e00f      	b.n	8001604 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015ee:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015f4:	68f9      	ldr	r1, [r7, #12]
 80015f6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80015f8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	3318      	adds	r3, #24
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	440b      	add	r3, r1
 8001602:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6819      	ldr	r1, [r3, #0]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3318      	adds	r3, #24
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	440b      	add	r3, r1
 8001614:	3304      	adds	r3, #4
 8001616:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	7d1b      	ldrb	r3, [r3, #20]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d111      	bne.n	8001644 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3318      	adds	r3, #24
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	4413      	add	r3, r2
 800162c:	3304      	adds	r3, #4
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	6811      	ldr	r1, [r2, #0]
 8001634:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3318      	adds	r3, #24
 800163c:	011b      	lsls	r3, r3, #4
 800163e:	440b      	add	r3, r1
 8001640:	3304      	adds	r3, #4
 8001642:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3307      	adds	r3, #7
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	061a      	lsls	r2, r3, #24
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3306      	adds	r3, #6
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	041b      	lsls	r3, r3, #16
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3305      	adds	r3, #5
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	4313      	orrs	r3, r2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	3204      	adds	r2, #4
 8001664:	7812      	ldrb	r2, [r2, #0]
 8001666:	4610      	mov	r0, r2
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	6811      	ldr	r1, [r2, #0]
 800166c:	ea43 0200 	orr.w	r2, r3, r0
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	440b      	add	r3, r1
 8001676:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800167a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3303      	adds	r3, #3
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	061a      	lsls	r2, r3, #24
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3302      	adds	r3, #2
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	041b      	lsls	r3, r3, #16
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3301      	adds	r3, #1
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	4313      	orrs	r3, r2
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	7812      	ldrb	r2, [r2, #0]
 800169c:	4610      	mov	r0, r2
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	6811      	ldr	r1, [r2, #0]
 80016a2:	ea43 0200 	orr.w	r2, r3, r0
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	440b      	add	r3, r1
 80016ac:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80016b0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3318      	adds	r3, #24
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	4413      	add	r3, r2
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	6811      	ldr	r1, [r2, #0]
 80016c4:	f043 0201 	orr.w	r2, r3, #1
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3318      	adds	r3, #24
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	440b      	add	r3, r1
 80016d0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e00e      	b.n	80016f4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e006      	b.n	80016f4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
  }
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3724      	adds	r7, #36	@ 0x24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001714:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001716:	7dfb      	ldrb	r3, [r7, #23]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d003      	beq.n	8001724 <HAL_CAN_GetRxMessage+0x24>
 800171c:	7dfb      	ldrb	r3, [r7, #23]
 800171e:	2b02      	cmp	r3, #2
 8001720:	f040 8103 	bne.w	800192a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10e      	bne.n	8001748 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d116      	bne.n	8001766 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0f7      	b.n	8001938 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d107      	bne.n	8001766 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e0e8      	b.n	8001938 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	331b      	adds	r3, #27
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	4413      	add	r3, r2
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0204 	and.w	r2, r3, #4
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10c      	bne.n	800179e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	331b      	adds	r3, #27
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	4413      	add	r3, r2
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	0d5b      	lsrs	r3, r3, #21
 8001794:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	e00b      	b.n	80017b6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	331b      	adds	r3, #27
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	4413      	add	r3, r2
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	331b      	adds	r3, #27
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	4413      	add	r3, r2
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0202 	and.w	r2, r3, #2
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	331b      	adds	r3, #27
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	4413      	add	r3, r2
 80017d8:	3304      	adds	r3, #4
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2208      	movs	r2, #8
 80017e8:	611a      	str	r2, [r3, #16]
 80017ea:	e00b      	b.n	8001804 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	331b      	adds	r3, #27
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	4413      	add	r3, r2
 80017f8:	3304      	adds	r3, #4
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 020f 	and.w	r2, r3, #15
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	331b      	adds	r3, #27
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	4413      	add	r3, r2
 8001810:	3304      	adds	r3, #4
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	b2da      	uxtb	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	331b      	adds	r3, #27
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	4413      	add	r3, r2
 8001828:	3304      	adds	r3, #4
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	0c1b      	lsrs	r3, r3, #16
 800182e:	b29a      	uxth	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	4413      	add	r3, r2
 800183e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	4413      	add	r3, r2
 8001854:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	0a1a      	lsrs	r2, r3, #8
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	4413      	add	r3, r2
 800186e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	0c1a      	lsrs	r2, r3, #16
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	3302      	adds	r3, #2
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	4413      	add	r3, r2
 8001888:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	0e1a      	lsrs	r2, r3, #24
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	3303      	adds	r3, #3
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	4413      	add	r3, r2
 80018a2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	3304      	adds	r3, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	4413      	add	r3, r2
 80018ba:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0a1a      	lsrs	r2, r3, #8
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	3305      	adds	r3, #5
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	4413      	add	r3, r2
 80018d4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	0c1a      	lsrs	r2, r3, #16
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	3306      	adds	r3, #6
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0e1a      	lsrs	r2, r3, #24
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	3307      	adds	r3, #7
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d108      	bne.n	8001916 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0220 	orr.w	r2, r2, #32
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	e007      	b.n	8001926 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	691a      	ldr	r2, [r3, #16]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0220 	orr.w	r2, r2, #32
 8001924:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e006      	b.n	8001938 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
  }
}
 8001938:	4618      	mov	r0, r3
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001954:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d002      	beq.n	8001962 <HAL_CAN_ActivateNotification+0x1e>
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d109      	bne.n	8001976 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6959      	ldr	r1, [r3, #20]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e006      	b.n	8001984 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
  }
}
 8001984:	4618      	mov	r0, r3
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	@ 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d07c      	beq.n	8001ad0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d023      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2201      	movs	r2, #1
 80019e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f983 	bl	8001cfe <HAL_CAN_TxMailbox0CompleteCallback>
 80019f8:	e016      	b.n	8001a28 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a06:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a0c:	e00c      	b.n	8001a28 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a20:	e002      	b.n	8001a28 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f989 	bl	8001d3a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d024      	beq.n	8001a7c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f963 	bl	8001d12 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a4c:	e016      	b.n	8001a7c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d004      	beq.n	8001a62 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a60:	e00c      	b.n	8001a7c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d004      	beq.n	8001a76 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a74:	e002      	b.n	8001a7c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f969 	bl	8001d4e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d024      	beq.n	8001ad0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f943 	bl	8001d26 <HAL_CAN_TxMailbox2CompleteCallback>
 8001aa0:	e016      	b.n	8001ad0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab4:	e00c      	b.n	8001ad0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac8:	e002      	b.n	8001ad0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f949 	bl	8001d62 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00c      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2210      	movs	r2, #16
 8001af2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00b      	beq.n	8001b16 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f930 	bl	8001d76 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d009      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7fe ffc4 	bl	8000abc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00c      	beq.n	8001b58 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2210      	movs	r2, #16
 8001b56:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	f003 0320 	and.w	r3, r3, #32
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00b      	beq.n	8001b7a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d006      	beq.n	8001b7a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2208      	movs	r2, #8
 8001b72:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f912 	bl	8001d9e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d009      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f8f9 	bl	8001d8a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f003 0310 	and.w	r3, r3, #16
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f8fc 	bl	8001db2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00b      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d006      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2208      	movs	r2, #8
 8001bd4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f8f5 	bl	8001dc6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d07b      	beq.n	8001cde <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d072      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d008      	beq.n	8001c0c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d008      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	f043 0302 	orr.w	r3, r3, #2
 8001c26:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d008      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3e:	f043 0304 	orr.w	r3, r3, #4
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d043      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d03e      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c5e:	2b60      	cmp	r3, #96	@ 0x60
 8001c60:	d02b      	beq.n	8001cba <HAL_CAN_IRQHandler+0x32a>
 8001c62:	2b60      	cmp	r3, #96	@ 0x60
 8001c64:	d82e      	bhi.n	8001cc4 <HAL_CAN_IRQHandler+0x334>
 8001c66:	2b50      	cmp	r3, #80	@ 0x50
 8001c68:	d022      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x320>
 8001c6a:	2b50      	cmp	r3, #80	@ 0x50
 8001c6c:	d82a      	bhi.n	8001cc4 <HAL_CAN_IRQHandler+0x334>
 8001c6e:	2b40      	cmp	r3, #64	@ 0x40
 8001c70:	d019      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x316>
 8001c72:	2b40      	cmp	r3, #64	@ 0x40
 8001c74:	d826      	bhi.n	8001cc4 <HAL_CAN_IRQHandler+0x334>
 8001c76:	2b30      	cmp	r3, #48	@ 0x30
 8001c78:	d010      	beq.n	8001c9c <HAL_CAN_IRQHandler+0x30c>
 8001c7a:	2b30      	cmp	r3, #48	@ 0x30
 8001c7c:	d822      	bhi.n	8001cc4 <HAL_CAN_IRQHandler+0x334>
 8001c7e:	2b10      	cmp	r3, #16
 8001c80:	d002      	beq.n	8001c88 <HAL_CAN_IRQHandler+0x2f8>
 8001c82:	2b20      	cmp	r3, #32
 8001c84:	d005      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c86:	e01d      	b.n	8001cc4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8a:	f043 0308 	orr.w	r3, r3, #8
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c90:	e019      	b.n	8001cc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	f043 0310 	orr.w	r3, r3, #16
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c9a:	e014      	b.n	8001cc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9e:	f043 0320 	orr.w	r3, r3, #32
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ca4:	e00f      	b.n	8001cc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cae:	e00a      	b.n	8001cc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cb6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cb8:	e005      	b.n	8001cc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cc2:	e000      	b.n	8001cc6 <HAL_CAN_IRQHandler+0x336>
            break;
 8001cc4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699a      	ldr	r2, [r3, #24]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001cd4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2204      	movs	r2, #4
 8001cdc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f872 	bl	8001dda <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	3728      	adds	r7, #40	@ 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e00:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <__NVIC_SetPriorityGrouping+0x44>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e22:	4a04      	ldr	r2, [pc, #16]	@ (8001e34 <__NVIC_SetPriorityGrouping+0x44>)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	60d3      	str	r3, [r2, #12]
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e3c:	4b04      	ldr	r3, [pc, #16]	@ (8001e50 <__NVIC_GetPriorityGrouping+0x18>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	0a1b      	lsrs	r3, r3, #8
 8001e42:	f003 0307 	and.w	r3, r3, #7
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	db0b      	blt.n	8001e7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	f003 021f 	and.w	r2, r3, #31
 8001e6c:	4907      	ldr	r1, [pc, #28]	@ (8001e8c <__NVIC_EnableIRQ+0x38>)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	2001      	movs	r0, #1
 8001e76:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000e100 	.word	0xe000e100

08001e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	6039      	str	r1, [r7, #0]
 8001e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db0a      	blt.n	8001eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	490c      	ldr	r1, [pc, #48]	@ (8001edc <__NVIC_SetPriority+0x4c>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	0112      	lsls	r2, r2, #4
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb8:	e00a      	b.n	8001ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4908      	ldr	r1, [pc, #32]	@ (8001ee0 <__NVIC_SetPriority+0x50>)
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	3b04      	subs	r3, #4
 8001ec8:	0112      	lsls	r2, r2, #4
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	440b      	add	r3, r1
 8001ece:	761a      	strb	r2, [r3, #24]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000e100 	.word	0xe000e100
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	@ 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f1c3 0307 	rsb	r3, r3, #7
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	bf28      	it	cs
 8001f02:	2304      	movcs	r3, #4
 8001f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d902      	bls.n	8001f14 <NVIC_EncodePriority+0x30>
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3b03      	subs	r3, #3
 8001f12:	e000      	b.n	8001f16 <NVIC_EncodePriority+0x32>
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	401a      	ands	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	43d9      	mvns	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	4313      	orrs	r3, r2
         );
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3724      	adds	r7, #36	@ 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f5c:	d301      	bcc.n	8001f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00f      	b.n	8001f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f62:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <SysTick_Config+0x40>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f7ff ff8e 	bl	8001e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f74:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <SysTick_Config+0x40>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7a:	4b04      	ldr	r3, [pc, #16]	@ (8001f8c <SysTick_Config+0x40>)
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff29 	bl	8001df0 <__NVIC_SetPriorityGrouping>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb8:	f7ff ff3e 	bl	8001e38 <__NVIC_GetPriorityGrouping>
 8001fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f7ff ff8e 	bl	8001ee4 <NVIC_EncodePriority>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff5d 	bl	8001e90 <__NVIC_SetPriority>
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff31 	bl	8001e54 <__NVIC_EnableIRQ>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ffa2 	bl	8001f4c <SysTick_Config>
 8002008:	4603      	mov	r3, r0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b084      	sub	sp, #16
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff f84e 	bl	80010c0 <HAL_GetTick>
 8002024:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d008      	beq.n	8002044 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2280      	movs	r2, #128	@ 0x80
 8002036:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e052      	b.n	80020ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0216 	bic.w	r2, r2, #22
 8002052:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002062:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	2b00      	cmp	r3, #0
 800206a:	d103      	bne.n	8002074 <HAL_DMA_Abort+0x62>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0208 	bic.w	r2, r2, #8
 8002082:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0201 	bic.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002094:	e013      	b.n	80020be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002096:	f7ff f813 	bl	80010c0 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b05      	cmp	r3, #5
 80020a2:	d90c      	bls.n	80020be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2220      	movs	r2, #32
 80020a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2203      	movs	r2, #3
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e015      	b.n	80020ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1e4      	bne.n	8002096 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d0:	223f      	movs	r2, #63	@ 0x3f
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d004      	beq.n	8002110 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2280      	movs	r2, #128	@ 0x80
 800210a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e00c      	b.n	800212a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2205      	movs	r2, #5
 8002114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0201 	bic.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	@ 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	e165      	b.n	8002420 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002154:	2201      	movs	r2, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	429a      	cmp	r2, r3
 800216e:	f040 8154 	bne.w	800241a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b01      	cmp	r3, #1
 800217c:	d005      	beq.n	800218a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002186:	2b02      	cmp	r3, #2
 8002188:	d130      	bne.n	80021ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	2203      	movs	r2, #3
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c0:	2201      	movs	r2, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 0201 	and.w	r2, r3, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d017      	beq.n	8002228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d123      	bne.n	800227c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	08da      	lsrs	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3208      	adds	r2, #8
 800223c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	220f      	movs	r2, #15
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	08da      	lsrs	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3208      	adds	r2, #8
 8002276:	69b9      	ldr	r1, [r7, #24]
 8002278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	2203      	movs	r2, #3
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0203 	and.w	r2, r3, #3
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80ae 	beq.w	800241a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002438 <HAL_GPIO_Init+0x300>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002438 <HAL_GPIO_Init+0x300>)
 80022c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002438 <HAL_GPIO_Init+0x300>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022da:	4a58      	ldr	r2, [pc, #352]	@ (800243c <HAL_GPIO_Init+0x304>)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	220f      	movs	r2, #15
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4f      	ldr	r2, [pc, #316]	@ (8002440 <HAL_GPIO_Init+0x308>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d025      	beq.n	8002352 <HAL_GPIO_Init+0x21a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4e      	ldr	r2, [pc, #312]	@ (8002444 <HAL_GPIO_Init+0x30c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d01f      	beq.n	800234e <HAL_GPIO_Init+0x216>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4d      	ldr	r2, [pc, #308]	@ (8002448 <HAL_GPIO_Init+0x310>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d019      	beq.n	800234a <HAL_GPIO_Init+0x212>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4c      	ldr	r2, [pc, #304]	@ (800244c <HAL_GPIO_Init+0x314>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_GPIO_Init+0x20e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4b      	ldr	r2, [pc, #300]	@ (8002450 <HAL_GPIO_Init+0x318>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00d      	beq.n	8002342 <HAL_GPIO_Init+0x20a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4a      	ldr	r2, [pc, #296]	@ (8002454 <HAL_GPIO_Init+0x31c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d007      	beq.n	800233e <HAL_GPIO_Init+0x206>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a49      	ldr	r2, [pc, #292]	@ (8002458 <HAL_GPIO_Init+0x320>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d101      	bne.n	800233a <HAL_GPIO_Init+0x202>
 8002336:	2306      	movs	r3, #6
 8002338:	e00c      	b.n	8002354 <HAL_GPIO_Init+0x21c>
 800233a:	2307      	movs	r3, #7
 800233c:	e00a      	b.n	8002354 <HAL_GPIO_Init+0x21c>
 800233e:	2305      	movs	r3, #5
 8002340:	e008      	b.n	8002354 <HAL_GPIO_Init+0x21c>
 8002342:	2304      	movs	r3, #4
 8002344:	e006      	b.n	8002354 <HAL_GPIO_Init+0x21c>
 8002346:	2303      	movs	r3, #3
 8002348:	e004      	b.n	8002354 <HAL_GPIO_Init+0x21c>
 800234a:	2302      	movs	r3, #2
 800234c:	e002      	b.n	8002354 <HAL_GPIO_Init+0x21c>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_GPIO_Init+0x21c>
 8002352:	2300      	movs	r3, #0
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	f002 0203 	and.w	r2, r2, #3
 800235a:	0092      	lsls	r2, r2, #2
 800235c:	4093      	lsls	r3, r2
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002364:	4935      	ldr	r1, [pc, #212]	@ (800243c <HAL_GPIO_Init+0x304>)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	3302      	adds	r3, #2
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002372:	4b3a      	ldr	r3, [pc, #232]	@ (800245c <HAL_GPIO_Init+0x324>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002396:	4a31      	ldr	r2, [pc, #196]	@ (800245c <HAL_GPIO_Init+0x324>)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800239c:	4b2f      	ldr	r3, [pc, #188]	@ (800245c <HAL_GPIO_Init+0x324>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023c0:	4a26      	ldr	r2, [pc, #152]	@ (800245c <HAL_GPIO_Init+0x324>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023c6:	4b25      	ldr	r3, [pc, #148]	@ (800245c <HAL_GPIO_Init+0x324>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ea:	4a1c      	ldr	r2, [pc, #112]	@ (800245c <HAL_GPIO_Init+0x324>)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023f0:	4b1a      	ldr	r3, [pc, #104]	@ (800245c <HAL_GPIO_Init+0x324>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002414:	4a11      	ldr	r2, [pc, #68]	@ (800245c <HAL_GPIO_Init+0x324>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3301      	adds	r3, #1
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b0f      	cmp	r3, #15
 8002424:	f67f ae96 	bls.w	8002154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3724      	adds	r7, #36	@ 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800
 800243c:	40013800 	.word	0x40013800
 8002440:	40020000 	.word	0x40020000
 8002444:	40020400 	.word	0x40020400
 8002448:	40020800 	.word	0x40020800
 800244c:	40020c00 	.word	0x40020c00
 8002450:	40021000 	.word	0x40021000
 8002454:	40021400 	.word	0x40021400
 8002458:	40021800 	.word	0x40021800
 800245c:	40013c00 	.word	0x40013c00

08002460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
 800246c:	4613      	mov	r3, r2
 800246e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002470:	787b      	ldrb	r3, [r7, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002476:	887a      	ldrh	r2, [r7, #2]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800247c:	e003      	b.n	8002486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	041a      	lsls	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	619a      	str	r2, [r3, #24]
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0cc      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a8:	4b68      	ldr	r3, [pc, #416]	@ (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d90c      	bls.n	80024d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b65      	ldr	r3, [pc, #404]	@ (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b63      	ldr	r3, [pc, #396]	@ (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0b8      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d020      	beq.n	800251e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e8:	4b59      	ldr	r3, [pc, #356]	@ (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	4a58      	ldr	r2, [pc, #352]	@ (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002500:	4b53      	ldr	r3, [pc, #332]	@ (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a52      	ldr	r2, [pc, #328]	@ (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800250a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800250c:	4b50      	ldr	r3, [pc, #320]	@ (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	494d      	ldr	r1, [pc, #308]	@ (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d044      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d107      	bne.n	8002542 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	4b47      	ldr	r3, [pc, #284]	@ (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d119      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e07f      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d003      	beq.n	8002552 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800254e:	2b03      	cmp	r3, #3
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002552:	4b3f      	ldr	r3, [pc, #252]	@ (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e06f      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002562:	4b3b      	ldr	r3, [pc, #236]	@ (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e067      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002572:	4b37      	ldr	r3, [pc, #220]	@ (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f023 0203 	bic.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4934      	ldr	r1, [pc, #208]	@ (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002580:	4313      	orrs	r3, r2
 8002582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002584:	f7fe fd9c 	bl	80010c0 <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800258c:	f7fe fd98 	bl	80010c0 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e04f      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 020c 	and.w	r2, r3, #12
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d1eb      	bne.n	800258c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025b4:	4b25      	ldr	r3, [pc, #148]	@ (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d20c      	bcs.n	80025dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b22      	ldr	r3, [pc, #136]	@ (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b20      	ldr	r3, [pc, #128]	@ (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e032      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d008      	beq.n	80025fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e8:	4b19      	ldr	r3, [pc, #100]	@ (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4916      	ldr	r1, [pc, #88]	@ (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002606:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	490e      	ldr	r1, [pc, #56]	@ (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800261a:	f000 f855 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 800261e:	4602      	mov	r2, r0
 8002620:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	490a      	ldr	r1, [pc, #40]	@ (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	5ccb      	ldrb	r3, [r1, r3]
 800262e:	fa22 f303 	lsr.w	r3, r2, r3
 8002632:	4a09      	ldr	r2, [pc, #36]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002636:	4b09      	ldr	r3, [pc, #36]	@ (800265c <HAL_RCC_ClockConfig+0x1c8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe fcfc 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40023c00 	.word	0x40023c00
 8002650:	40023800 	.word	0x40023800
 8002654:	08004be4 	.word	0x08004be4
 8002658:	20000004 	.word	0x20000004
 800265c:	20000008 	.word	0x20000008

08002660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002664:	4b03      	ldr	r3, [pc, #12]	@ (8002674 <HAL_RCC_GetHCLKFreq+0x14>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20000004 	.word	0x20000004

08002678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800267c:	f7ff fff0 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 8002680:	4602      	mov	r2, r0
 8002682:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	0a9b      	lsrs	r3, r3, #10
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	4903      	ldr	r1, [pc, #12]	@ (800269c <HAL_RCC_GetPCLK1Freq+0x24>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002694:	4618      	mov	r0, r3
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40023800 	.word	0x40023800
 800269c:	08004bf4 	.word	0x08004bf4

080026a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026a4:	f7ff ffdc 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	0b5b      	lsrs	r3, r3, #13
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	4903      	ldr	r1, [pc, #12]	@ (80026c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026b6:	5ccb      	ldrb	r3, [r1, r3]
 80026b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026bc:	4618      	mov	r0, r3
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40023800 	.word	0x40023800
 80026c4:	08004bf4 	.word	0x08004bf4

080026c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026cc:	b0ae      	sub	sp, #184	@ 0xb8
 80026ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ee:	4bcb      	ldr	r3, [pc, #812]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x354>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b0c      	cmp	r3, #12
 80026f8:	f200 8206 	bhi.w	8002b08 <HAL_RCC_GetSysClockFreq+0x440>
 80026fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002704 <HAL_RCC_GetSysClockFreq+0x3c>)
 80026fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002702:	bf00      	nop
 8002704:	08002739 	.word	0x08002739
 8002708:	08002b09 	.word	0x08002b09
 800270c:	08002b09 	.word	0x08002b09
 8002710:	08002b09 	.word	0x08002b09
 8002714:	08002741 	.word	0x08002741
 8002718:	08002b09 	.word	0x08002b09
 800271c:	08002b09 	.word	0x08002b09
 8002720:	08002b09 	.word	0x08002b09
 8002724:	08002749 	.word	0x08002749
 8002728:	08002b09 	.word	0x08002b09
 800272c:	08002b09 	.word	0x08002b09
 8002730:	08002b09 	.word	0x08002b09
 8002734:	08002939 	.word	0x08002939
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002738:	4bb9      	ldr	r3, [pc, #740]	@ (8002a20 <HAL_RCC_GetSysClockFreq+0x358>)
 800273a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800273e:	e1e7      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002740:	4bb8      	ldr	r3, [pc, #736]	@ (8002a24 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002742:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002746:	e1e3      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002748:	4bb4      	ldr	r3, [pc, #720]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x354>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002750:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002754:	4bb1      	ldr	r3, [pc, #708]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d071      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002760:	4bae      	ldr	r3, [pc, #696]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	099b      	lsrs	r3, r3, #6
 8002766:	2200      	movs	r2, #0
 8002768:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800276c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002770:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002778:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002782:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002786:	4622      	mov	r2, r4
 8002788:	462b      	mov	r3, r5
 800278a:	f04f 0000 	mov.w	r0, #0
 800278e:	f04f 0100 	mov.w	r1, #0
 8002792:	0159      	lsls	r1, r3, #5
 8002794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002798:	0150      	lsls	r0, r2, #5
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4621      	mov	r1, r4
 80027a0:	1a51      	subs	r1, r2, r1
 80027a2:	6439      	str	r1, [r7, #64]	@ 0x40
 80027a4:	4629      	mov	r1, r5
 80027a6:	eb63 0301 	sbc.w	r3, r3, r1
 80027aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80027b8:	4649      	mov	r1, r9
 80027ba:	018b      	lsls	r3, r1, #6
 80027bc:	4641      	mov	r1, r8
 80027be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027c2:	4641      	mov	r1, r8
 80027c4:	018a      	lsls	r2, r1, #6
 80027c6:	4641      	mov	r1, r8
 80027c8:	1a51      	subs	r1, r2, r1
 80027ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027cc:	4649      	mov	r1, r9
 80027ce:	eb63 0301 	sbc.w	r3, r3, r1
 80027d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80027e0:	4649      	mov	r1, r9
 80027e2:	00cb      	lsls	r3, r1, #3
 80027e4:	4641      	mov	r1, r8
 80027e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027ea:	4641      	mov	r1, r8
 80027ec:	00ca      	lsls	r2, r1, #3
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	4622      	mov	r2, r4
 80027f6:	189b      	adds	r3, r3, r2
 80027f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80027fa:	462b      	mov	r3, r5
 80027fc:	460a      	mov	r2, r1
 80027fe:	eb42 0303 	adc.w	r3, r2, r3
 8002802:	637b      	str	r3, [r7, #52]	@ 0x34
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002810:	4629      	mov	r1, r5
 8002812:	024b      	lsls	r3, r1, #9
 8002814:	4621      	mov	r1, r4
 8002816:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800281a:	4621      	mov	r1, r4
 800281c:	024a      	lsls	r2, r1, #9
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002826:	2200      	movs	r2, #0
 8002828:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800282c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002830:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002834:	f7fd fd44 	bl	80002c0 <__aeabi_uldivmod>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4613      	mov	r3, r2
 800283e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002842:	e067      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002844:	4b75      	ldr	r3, [pc, #468]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	2200      	movs	r2, #0
 800284c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002850:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002854:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800285c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800285e:	2300      	movs	r3, #0
 8002860:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002862:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002866:	4622      	mov	r2, r4
 8002868:	462b      	mov	r3, r5
 800286a:	f04f 0000 	mov.w	r0, #0
 800286e:	f04f 0100 	mov.w	r1, #0
 8002872:	0159      	lsls	r1, r3, #5
 8002874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002878:	0150      	lsls	r0, r2, #5
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4621      	mov	r1, r4
 8002880:	1a51      	subs	r1, r2, r1
 8002882:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002884:	4629      	mov	r1, r5
 8002886:	eb63 0301 	sbc.w	r3, r3, r1
 800288a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002898:	4649      	mov	r1, r9
 800289a:	018b      	lsls	r3, r1, #6
 800289c:	4641      	mov	r1, r8
 800289e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028a2:	4641      	mov	r1, r8
 80028a4:	018a      	lsls	r2, r1, #6
 80028a6:	4641      	mov	r1, r8
 80028a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80028ac:	4649      	mov	r1, r9
 80028ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028c6:	4692      	mov	sl, r2
 80028c8:	469b      	mov	fp, r3
 80028ca:	4623      	mov	r3, r4
 80028cc:	eb1a 0303 	adds.w	r3, sl, r3
 80028d0:	623b      	str	r3, [r7, #32]
 80028d2:	462b      	mov	r3, r5
 80028d4:	eb4b 0303 	adc.w	r3, fp, r3
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80028e6:	4629      	mov	r1, r5
 80028e8:	028b      	lsls	r3, r1, #10
 80028ea:	4621      	mov	r1, r4
 80028ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f0:	4621      	mov	r1, r4
 80028f2:	028a      	lsls	r2, r1, #10
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028fc:	2200      	movs	r2, #0
 80028fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8002900:	677a      	str	r2, [r7, #116]	@ 0x74
 8002902:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002906:	f7fd fcdb 	bl	80002c0 <__aeabi_uldivmod>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4613      	mov	r3, r2
 8002910:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002914:	4b41      	ldr	r3, [pc, #260]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	3301      	adds	r3, #1
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800292a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800292e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002932:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002936:	e0eb      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002938:	4b38      	ldr	r3, [pc, #224]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x354>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002940:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002944:	4b35      	ldr	r3, [pc, #212]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d06b      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002950:	4b32      	ldr	r3, [pc, #200]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	099b      	lsrs	r3, r3, #6
 8002956:	2200      	movs	r2, #0
 8002958:	66bb      	str	r3, [r7, #104]	@ 0x68
 800295a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800295c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800295e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002962:	663b      	str	r3, [r7, #96]	@ 0x60
 8002964:	2300      	movs	r3, #0
 8002966:	667b      	str	r3, [r7, #100]	@ 0x64
 8002968:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800296c:	4622      	mov	r2, r4
 800296e:	462b      	mov	r3, r5
 8002970:	f04f 0000 	mov.w	r0, #0
 8002974:	f04f 0100 	mov.w	r1, #0
 8002978:	0159      	lsls	r1, r3, #5
 800297a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800297e:	0150      	lsls	r0, r2, #5
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4621      	mov	r1, r4
 8002986:	1a51      	subs	r1, r2, r1
 8002988:	61b9      	str	r1, [r7, #24]
 800298a:	4629      	mov	r1, r5
 800298c:	eb63 0301 	sbc.w	r3, r3, r1
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800299e:	4659      	mov	r1, fp
 80029a0:	018b      	lsls	r3, r1, #6
 80029a2:	4651      	mov	r1, sl
 80029a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029a8:	4651      	mov	r1, sl
 80029aa:	018a      	lsls	r2, r1, #6
 80029ac:	4651      	mov	r1, sl
 80029ae:	ebb2 0801 	subs.w	r8, r2, r1
 80029b2:	4659      	mov	r1, fp
 80029b4:	eb63 0901 	sbc.w	r9, r3, r1
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029cc:	4690      	mov	r8, r2
 80029ce:	4699      	mov	r9, r3
 80029d0:	4623      	mov	r3, r4
 80029d2:	eb18 0303 	adds.w	r3, r8, r3
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	462b      	mov	r3, r5
 80029da:	eb49 0303 	adc.w	r3, r9, r3
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80029ec:	4629      	mov	r1, r5
 80029ee:	024b      	lsls	r3, r1, #9
 80029f0:	4621      	mov	r1, r4
 80029f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029f6:	4621      	mov	r1, r4
 80029f8:	024a      	lsls	r2, r1, #9
 80029fa:	4610      	mov	r0, r2
 80029fc:	4619      	mov	r1, r3
 80029fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a02:	2200      	movs	r2, #0
 8002a04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a06:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002a08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a0c:	f7fd fc58 	bl	80002c0 <__aeabi_uldivmod>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4613      	mov	r3, r2
 8002a16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a1a:	e065      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x420>
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	00f42400 	.word	0x00f42400
 8002a24:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a28:	4b3d      	ldr	r3, [pc, #244]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	099b      	lsrs	r3, r3, #6
 8002a2e:	2200      	movs	r2, #0
 8002a30:	4618      	mov	r0, r3
 8002a32:	4611      	mov	r1, r2
 8002a34:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a38:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a3e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002a42:	4642      	mov	r2, r8
 8002a44:	464b      	mov	r3, r9
 8002a46:	f04f 0000 	mov.w	r0, #0
 8002a4a:	f04f 0100 	mov.w	r1, #0
 8002a4e:	0159      	lsls	r1, r3, #5
 8002a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a54:	0150      	lsls	r0, r2, #5
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4641      	mov	r1, r8
 8002a5c:	1a51      	subs	r1, r2, r1
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	4649      	mov	r1, r9
 8002a62:	eb63 0301 	sbc.w	r3, r3, r1
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a74:	4659      	mov	r1, fp
 8002a76:	018b      	lsls	r3, r1, #6
 8002a78:	4651      	mov	r1, sl
 8002a7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a7e:	4651      	mov	r1, sl
 8002a80:	018a      	lsls	r2, r1, #6
 8002a82:	4651      	mov	r1, sl
 8002a84:	1a54      	subs	r4, r2, r1
 8002a86:	4659      	mov	r1, fp
 8002a88:	eb63 0501 	sbc.w	r5, r3, r1
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	00eb      	lsls	r3, r5, #3
 8002a96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a9a:	00e2      	lsls	r2, r4, #3
 8002a9c:	4614      	mov	r4, r2
 8002a9e:	461d      	mov	r5, r3
 8002aa0:	4643      	mov	r3, r8
 8002aa2:	18e3      	adds	r3, r4, r3
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	464b      	mov	r3, r9
 8002aa8:	eb45 0303 	adc.w	r3, r5, r3
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aba:	4629      	mov	r1, r5
 8002abc:	028b      	lsls	r3, r1, #10
 8002abe:	4621      	mov	r1, r4
 8002ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	028a      	lsls	r2, r1, #10
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ad4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002ad6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ada:	f7fd fbf1 	bl	80002c0 <__aeabi_uldivmod>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x458>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0f1b      	lsrs	r3, r3, #28
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002af6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002afa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b06:	e003      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b08:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	37b8      	adds	r7, #184	@ 0xb8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800
 8002b24:	00f42400 	.word	0x00f42400

08002b28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e28d      	b.n	8003056 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 8083 	beq.w	8002c4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b48:	4b94      	ldr	r3, [pc, #592]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 030c 	and.w	r3, r3, #12
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d019      	beq.n	8002b88 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b54:	4b91      	ldr	r3, [pc, #580]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b60:	4b8e      	ldr	r3, [pc, #568]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b6c:	d00c      	beq.n	8002b88 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6e:	4b8b      	ldr	r3, [pc, #556]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b76:	2b0c      	cmp	r3, #12
 8002b78:	d112      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b7a:	4b88      	ldr	r3, [pc, #544]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b86:	d10b      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b88:	4b84      	ldr	r3, [pc, #528]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d05b      	beq.n	8002c4c <HAL_RCC_OscConfig+0x124>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d157      	bne.n	8002c4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e25a      	b.n	8003056 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba8:	d106      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x90>
 8002baa:	4b7c      	ldr	r3, [pc, #496]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a7b      	ldr	r2, [pc, #492]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	e01d      	b.n	8002bf4 <HAL_RCC_OscConfig+0xcc>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bc0:	d10c      	bne.n	8002bdc <HAL_RCC_OscConfig+0xb4>
 8002bc2:	4b76      	ldr	r3, [pc, #472]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a75      	ldr	r2, [pc, #468]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	4b73      	ldr	r3, [pc, #460]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a72      	ldr	r2, [pc, #456]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e00b      	b.n	8002bf4 <HAL_RCC_OscConfig+0xcc>
 8002bdc:	4b6f      	ldr	r3, [pc, #444]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a6e      	ldr	r2, [pc, #440]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	4b6c      	ldr	r3, [pc, #432]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a6b      	ldr	r2, [pc, #428]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d013      	beq.n	8002c24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fa60 	bl	80010c0 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c04:	f7fe fa5c 	bl	80010c0 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	@ 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e21f      	b.n	8003056 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c16:	4b61      	ldr	r3, [pc, #388]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0xdc>
 8002c22:	e014      	b.n	8002c4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe fa4c 	bl	80010c0 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c2c:	f7fe fa48 	bl	80010c0 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	@ 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e20b      	b.n	8003056 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3e:	4b57      	ldr	r3, [pc, #348]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x104>
 8002c4a:	e000      	b.n	8002c4e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d06f      	beq.n	8002d3a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c5a:	4b50      	ldr	r3, [pc, #320]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d017      	beq.n	8002c96 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c66:	4b4d      	ldr	r3, [pc, #308]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d105      	bne.n	8002c7e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c72:	4b4a      	ldr	r3, [pc, #296]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7e:	4b47      	ldr	r3, [pc, #284]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d11c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8a:	4b44      	ldr	r3, [pc, #272]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	4b41      	ldr	r3, [pc, #260]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_RCC_OscConfig+0x186>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e1d3      	b.n	8003056 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b3b      	ldr	r3, [pc, #236]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4937      	ldr	r1, [pc, #220]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	e03a      	b.n	8002d3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ccc:	4b34      	ldr	r3, [pc, #208]	@ (8002da0 <HAL_RCC_OscConfig+0x278>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd2:	f7fe f9f5 	bl	80010c0 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cda:	f7fe f9f1 	bl	80010c0 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e1b4      	b.n	8003056 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cec:	4b2b      	ldr	r3, [pc, #172]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf8:	4b28      	ldr	r3, [pc, #160]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4925      	ldr	r1, [pc, #148]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
 8002d0c:	e015      	b.n	8002d3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0e:	4b24      	ldr	r3, [pc, #144]	@ (8002da0 <HAL_RCC_OscConfig+0x278>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe f9d4 	bl	80010c0 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7fe f9d0 	bl	80010c0 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e193      	b.n	8003056 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d036      	beq.n	8002db4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4e:	4b15      	ldr	r3, [pc, #84]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d54:	f7fe f9b4 	bl	80010c0 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5c:	f7fe f9b0 	bl	80010c0 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e173      	b.n	8003056 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x234>
 8002d7a:	e01b      	b.n	8002db4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d7c:	4b09      	ldr	r3, [pc, #36]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d82:	f7fe f99d 	bl	80010c0 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d88:	e00e      	b.n	8002da8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8a:	f7fe f999 	bl	80010c0 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d907      	bls.n	8002da8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e15c      	b.n	8003056 <HAL_RCC_OscConfig+0x52e>
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	42470000 	.word	0x42470000
 8002da4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	4b8a      	ldr	r3, [pc, #552]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1ea      	bne.n	8002d8a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8097 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	4b83      	ldr	r3, [pc, #524]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10f      	bne.n	8002df2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	4b7f      	ldr	r3, [pc, #508]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	4a7e      	ldr	r2, [pc, #504]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002de2:	4b7c      	ldr	r3, [pc, #496]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df2:	4b79      	ldr	r3, [pc, #484]	@ (8002fd8 <HAL_RCC_OscConfig+0x4b0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d118      	bne.n	8002e30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfe:	4b76      	ldr	r3, [pc, #472]	@ (8002fd8 <HAL_RCC_OscConfig+0x4b0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a75      	ldr	r2, [pc, #468]	@ (8002fd8 <HAL_RCC_OscConfig+0x4b0>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe f959 	bl	80010c0 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e12:	f7fe f955 	bl	80010c0 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e118      	b.n	8003056 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	4b6c      	ldr	r3, [pc, #432]	@ (8002fd8 <HAL_RCC_OscConfig+0x4b0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x31e>
 8002e38:	4b66      	ldr	r3, [pc, #408]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3c:	4a65      	ldr	r2, [pc, #404]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e44:	e01c      	b.n	8002e80 <HAL_RCC_OscConfig+0x358>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x340>
 8002e4e:	4b61      	ldr	r3, [pc, #388]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e52:	4a60      	ldr	r2, [pc, #384]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002e54:	f043 0304 	orr.w	r3, r3, #4
 8002e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e5a:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5e:	4a5d      	ldr	r2, [pc, #372]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e66:	e00b      	b.n	8002e80 <HAL_RCC_OscConfig+0x358>
 8002e68:	4b5a      	ldr	r3, [pc, #360]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6c:	4a59      	ldr	r2, [pc, #356]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e74:	4b57      	ldr	r3, [pc, #348]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e78:	4a56      	ldr	r2, [pc, #344]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002e7a:	f023 0304 	bic.w	r3, r3, #4
 8002e7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d015      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e88:	f7fe f91a 	bl	80010c0 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fe f916 	bl	80010c0 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e0d7      	b.n	8003056 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea6:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0ee      	beq.n	8002e90 <HAL_RCC_OscConfig+0x368>
 8002eb2:	e014      	b.n	8002ede <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb4:	f7fe f904 	bl	80010c0 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebc:	f7fe f900 	bl	80010c0 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e0c1      	b.n	8003056 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed2:	4b40      	ldr	r3, [pc, #256]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ee      	bne.n	8002ebc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d105      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	4a3a      	ldr	r2, [pc, #232]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80ad 	beq.w	8003054 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002efa:	4b36      	ldr	r3, [pc, #216]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d060      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d145      	bne.n	8002f9a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b33      	ldr	r3, [pc, #204]	@ (8002fdc <HAL_RCC_OscConfig+0x4b4>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe f8d4 	bl	80010c0 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe f8d0 	bl	80010c0 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e093      	b.n	8003056 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	4b29      	ldr	r3, [pc, #164]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69da      	ldr	r2, [r3, #28]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f48:	019b      	lsls	r3, r3, #6
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	3b01      	subs	r3, #1
 8002f54:	041b      	lsls	r3, r3, #16
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5c:	061b      	lsls	r3, r3, #24
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f64:	071b      	lsls	r3, r3, #28
 8002f66:	491b      	ldr	r1, [pc, #108]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fdc <HAL_RCC_OscConfig+0x4b4>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f72:	f7fe f8a5 	bl	80010c0 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7fe f8a1 	bl	80010c0 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e064      	b.n	8003056 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8c:	4b11      	ldr	r3, [pc, #68]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x452>
 8002f98:	e05c      	b.n	8003054 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9a:	4b10      	ldr	r3, [pc, #64]	@ (8002fdc <HAL_RCC_OscConfig+0x4b4>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fe f88e 	bl	80010c0 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fe f88a 	bl	80010c0 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e04d      	b.n	8003056 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x480>
 8002fc6:	e045      	b.n	8003054 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e040      	b.n	8003056 <HAL_RCC_OscConfig+0x52e>
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40007000 	.word	0x40007000
 8002fdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8003060 <HAL_RCC_OscConfig+0x538>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d030      	beq.n	8003050 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d129      	bne.n	8003050 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d122      	bne.n	8003050 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003010:	4013      	ands	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003016:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003018:	4293      	cmp	r3, r2
 800301a:	d119      	bne.n	8003050 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	3b01      	subs	r3, #1
 800302a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d10f      	bne.n	8003050 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d107      	bne.n	8003050 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800

08003064 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e042      	b.n	80030fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fd feac 	bl	8000de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2224      	movs	r2, #36	@ 0x24
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fdf3 	bl	8003c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08a      	sub	sp, #40	@ 0x28
 8003108:	af02      	add	r7, sp, #8
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b20      	cmp	r3, #32
 8003122:	d175      	bne.n	8003210 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <HAL_UART_Transmit+0x2c>
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e06e      	b.n	8003212 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2221      	movs	r2, #33	@ 0x21
 800313e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003142:	f7fd ffbd 	bl	80010c0 <HAL_GetTick>
 8003146:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	88fa      	ldrh	r2, [r7, #6]
 800314c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	88fa      	ldrh	r2, [r7, #6]
 8003152:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800315c:	d108      	bne.n	8003170 <HAL_UART_Transmit+0x6c>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d104      	bne.n	8003170 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	e003      	b.n	8003178 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003174:	2300      	movs	r3, #0
 8003176:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003178:	e02e      	b.n	80031d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2200      	movs	r2, #0
 8003182:	2180      	movs	r1, #128	@ 0x80
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fb55 	bl	8003834 <UART_WaitOnFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e03a      	b.n	8003212 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10b      	bne.n	80031ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	3302      	adds	r3, #2
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	e007      	b.n	80031ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	3301      	adds	r3, #1
 80031c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1cb      	bne.n	800317a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2200      	movs	r2, #0
 80031ea:	2140      	movs	r1, #64	@ 0x40
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 fb21 	bl	8003834 <UART_WaitOnFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e006      	b.n	8003212 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	e000      	b.n	8003212 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003210:	2302      	movs	r3, #2
  }
}
 8003212:	4618      	mov	r0, r3
 8003214:	3720      	adds	r7, #32
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800321a:	b480      	push	{r7}
 800321c:	b085      	sub	sp, #20
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	4613      	mov	r3, r2
 8003226:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b20      	cmp	r3, #32
 8003232:	d121      	bne.n	8003278 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_UART_Transmit_IT+0x26>
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e01a      	b.n	800327a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	88fa      	ldrh	r2, [r7, #6]
 800324e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	88fa      	ldrh	r2, [r7, #6]
 8003254:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2221      	movs	r2, #33	@ 0x21
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003272:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	e000      	b.n	800327a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003278:	2302      	movs	r3, #2
  }
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	4613      	mov	r3, r2
 8003292:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b20      	cmp	r3, #32
 800329e:	d112      	bne.n	80032c6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_UART_Receive_IT+0x26>
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e00b      	b.n	80032c8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	461a      	mov	r2, r3
 80032ba:	68b9      	ldr	r1, [r7, #8]
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 fb12 	bl	80038e6 <UART_Start_Receive_IT>
 80032c2:	4603      	mov	r3, r0
 80032c4:	e000      	b.n	80032c8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80032c6:	2302      	movs	r3, #2
  }
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b0ba      	sub	sp, #232	@ 0xe8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800330e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10f      	bne.n	8003336 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_UART_IRQHandler+0x66>
 8003322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fbf2 	bl	8003b18 <UART_Receive_IT>
      return;
 8003334:	e25b      	b.n	80037ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003336:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80de 	beq.w	80034fc <HAL_UART_IRQHandler+0x22c>
 8003340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d106      	bne.n	800335a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800334c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003350:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80d1 	beq.w	80034fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800335a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00b      	beq.n	800337e <HAL_UART_IRQHandler+0xae>
 8003366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800336a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003376:	f043 0201 	orr.w	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800337e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00b      	beq.n	80033a2 <HAL_UART_IRQHandler+0xd2>
 800338a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d005      	beq.n	80033a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339a:	f043 0202 	orr.w	r2, r3, #2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <HAL_UART_IRQHandler+0xf6>
 80033ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033be:	f043 0204 	orr.w	r2, r3, #4
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80033c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d011      	beq.n	80033f6 <HAL_UART_IRQHandler+0x126>
 80033d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d105      	bne.n	80033ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80033de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d005      	beq.n	80033f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ee:	f043 0208 	orr.w	r2, r3, #8
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 81f2 	beq.w	80037e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003404:	f003 0320 	and.w	r3, r3, #32
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_UART_IRQHandler+0x14e>
 800340c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fb7d 	bl	8003b18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003428:	2b40      	cmp	r3, #64	@ 0x40
 800342a:	bf0c      	ite	eq
 800342c:	2301      	moveq	r3, #1
 800342e:	2300      	movne	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d103      	bne.n	800344a <HAL_UART_IRQHandler+0x17a>
 8003442:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003446:	2b00      	cmp	r3, #0
 8003448:	d04f      	beq.n	80034ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fa85 	bl	800395a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345a:	2b40      	cmp	r3, #64	@ 0x40
 800345c:	d141      	bne.n	80034e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3314      	adds	r3, #20
 8003464:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003468:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003474:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800347c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3314      	adds	r3, #20
 8003486:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800348a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800348e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003496:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800349a:	e841 2300 	strex	r3, r2, [r1]
 800349e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80034a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1d9      	bne.n	800345e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d013      	beq.n	80034da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b6:	4a7e      	ldr	r2, [pc, #504]	@ (80036b0 <HAL_UART_IRQHandler+0x3e0>)
 80034b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe fe17 	bl	80020f2 <HAL_DMA_Abort_IT>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d016      	beq.n	80034f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034d4:	4610      	mov	r0, r2
 80034d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d8:	e00e      	b.n	80034f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f994 	bl	8003808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e0:	e00a      	b.n	80034f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f990 	bl	8003808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e8:	e006      	b.n	80034f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f98c 	bl	8003808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80034f6:	e175      	b.n	80037e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f8:	bf00      	nop
    return;
 80034fa:	e173      	b.n	80037e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003500:	2b01      	cmp	r3, #1
 8003502:	f040 814f 	bne.w	80037a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8148 	beq.w	80037a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 8141 	beq.w	80037a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003542:	2b40      	cmp	r3, #64	@ 0x40
 8003544:	f040 80b6 	bne.w	80036b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003554:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8145 	beq.w	80037e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003562:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003566:	429a      	cmp	r2, r3
 8003568:	f080 813e 	bcs.w	80037e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003572:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800357e:	f000 8088 	beq.w	8003692 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	330c      	adds	r3, #12
 8003588:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003590:	e853 3f00 	ldrex	r3, [r3]
 8003594:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003598:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800359c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	330c      	adds	r3, #12
 80035aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80035ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80035ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80035c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1d9      	bne.n	8003582 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3314      	adds	r3, #20
 80035d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80035de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3314      	adds	r3, #20
 80035ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80035f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80035fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80035fe:	e841 2300 	strex	r3, r2, [r1]
 8003602:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003604:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1e1      	bne.n	80035ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3314      	adds	r3, #20
 8003610:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003612:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800361a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800361c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003620:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3314      	adds	r3, #20
 800362a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800362e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003630:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003632:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003634:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003636:	e841 2300 	strex	r3, r2, [r1]
 800363a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800363c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1e3      	bne.n	800360a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	330c      	adds	r3, #12
 8003656:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003660:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003662:	f023 0310 	bic.w	r3, r3, #16
 8003666:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	330c      	adds	r3, #12
 8003670:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003674:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003676:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003678:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800367a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800367c:	e841 2300 	strex	r3, r2, [r1]
 8003680:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e3      	bne.n	8003650 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368c:	4618      	mov	r0, r3
 800368e:	f7fe fcc0 	bl	8002012 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2202      	movs	r2, #2
 8003696:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	4619      	mov	r1, r3
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f8b7 	bl	800381c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036ae:	e09b      	b.n	80037e8 <HAL_UART_IRQHandler+0x518>
 80036b0:	08003a21 	.word	0x08003a21
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036bc:	b29b      	uxth	r3, r3
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 808e 	beq.w	80037ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80036d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 8089 	beq.w	80037ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	330c      	adds	r3, #12
 80036e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e4:	e853 3f00 	ldrex	r3, [r3]
 80036e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	330c      	adds	r3, #12
 80036fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80036fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8003700:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003702:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003704:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003706:	e841 2300 	strex	r3, r2, [r1]
 800370a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800370c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1e3      	bne.n	80036da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3314      	adds	r3, #20
 8003718:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	e853 3f00 	ldrex	r3, [r3]
 8003720:	623b      	str	r3, [r7, #32]
   return(result);
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	f023 0301 	bic.w	r3, r3, #1
 8003728:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3314      	adds	r3, #20
 8003732:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003736:	633a      	str	r2, [r7, #48]	@ 0x30
 8003738:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800373c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800373e:	e841 2300 	strex	r3, r2, [r1]
 8003742:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1e3      	bne.n	8003712 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	e853 3f00 	ldrex	r3, [r3]
 8003766:	60fb      	str	r3, [r7, #12]
   return(result);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0310 	bic.w	r3, r3, #16
 800376e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	330c      	adds	r3, #12
 8003778:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800377c:	61fa      	str	r2, [r7, #28]
 800377e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003780:	69b9      	ldr	r1, [r7, #24]
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	e841 2300 	strex	r3, r2, [r1]
 8003788:	617b      	str	r3, [r7, #20]
   return(result);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1e3      	bne.n	8003758 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003796:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f83d 	bl	800381c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037a2:	e023      	b.n	80037ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d009      	beq.n	80037c4 <HAL_UART_IRQHandler+0x4f4>
 80037b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f943 	bl	8003a48 <UART_Transmit_IT>
    return;
 80037c2:	e014      	b.n	80037ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00e      	beq.n	80037ee <HAL_UART_IRQHandler+0x51e>
 80037d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f983 	bl	8003ae8 <UART_EndTransmit_IT>
    return;
 80037e2:	e004      	b.n	80037ee <HAL_UART_IRQHandler+0x51e>
    return;
 80037e4:	bf00      	nop
 80037e6:	e002      	b.n	80037ee <HAL_UART_IRQHandler+0x51e>
      return;
 80037e8:	bf00      	nop
 80037ea:	e000      	b.n	80037ee <HAL_UART_IRQHandler+0x51e>
      return;
 80037ec:	bf00      	nop
  }
}
 80037ee:	37e8      	adds	r7, #232	@ 0xe8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003844:	e03b      	b.n	80038be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384c:	d037      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384e:	f7fd fc37 	bl	80010c0 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	6a3a      	ldr	r2, [r7, #32]
 800385a:	429a      	cmp	r2, r3
 800385c:	d302      	bcc.n	8003864 <UART_WaitOnFlagUntilTimeout+0x30>
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e03a      	b.n	80038de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d023      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0x8a>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b80      	cmp	r3, #128	@ 0x80
 800387a:	d020      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0x8a>
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b40      	cmp	r3, #64	@ 0x40
 8003880:	d01d      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b08      	cmp	r3, #8
 800388e:	d116      	bne.n	80038be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f857 	bl	800395a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2208      	movs	r2, #8
 80038b0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e00f      	b.n	80038de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4013      	ands	r3, r2
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	bf0c      	ite	eq
 80038ce:	2301      	moveq	r3, #1
 80038d0:	2300      	movne	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d0b4      	beq.n	8003846 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b085      	sub	sp, #20
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	4613      	mov	r3, r2
 80038f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	88fa      	ldrh	r2, [r7, #6]
 80038fe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	88fa      	ldrh	r2, [r7, #6]
 8003904:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2222      	movs	r2, #34	@ 0x22
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d007      	beq.n	800392c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800392a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0220 	orr.w	r2, r2, #32
 800394a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800395a:	b480      	push	{r7}
 800395c:	b095      	sub	sp, #84	@ 0x54
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	330c      	adds	r3, #12
 8003968:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003974:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003978:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003982:	643a      	str	r2, [r7, #64]	@ 0x40
 8003984:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003986:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003988:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800398a:	e841 2300 	strex	r3, r2, [r1]
 800398e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1e5      	bne.n	8003962 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	3314      	adds	r3, #20
 800399c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f023 0301 	bic.w	r3, r3, #1
 80039ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3314      	adds	r3, #20
 80039b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1e5      	bne.n	8003996 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d119      	bne.n	8003a06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	e853 3f00 	ldrex	r3, [r3]
 80039e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f023 0310 	bic.w	r3, r3, #16
 80039e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039f2:	61ba      	str	r2, [r7, #24]
 80039f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	6979      	ldr	r1, [r7, #20]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e5      	bne.n	80039d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a14:	bf00      	nop
 8003a16:	3754      	adds	r7, #84	@ 0x54
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f7ff fee4 	bl	8003808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b21      	cmp	r3, #33	@ 0x21
 8003a5a:	d13e      	bne.n	8003ada <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a64:	d114      	bne.n	8003a90 <UART_Transmit_IT+0x48>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d110      	bne.n	8003a90 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a82:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	1c9a      	adds	r2, r3, #2
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	621a      	str	r2, [r3, #32]
 8003a8e:	e008      	b.n	8003aa2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	1c59      	adds	r1, r3, #1
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6211      	str	r1, [r2, #32]
 8003a9a:	781a      	ldrb	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	4619      	mov	r1, r3
 8003ab0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10f      	bne.n	8003ad6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ac4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ad4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e000      	b.n	8003adc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ada:	2302      	movs	r3, #2
  }
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003afe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff fe73 	bl	80037f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08c      	sub	sp, #48	@ 0x30
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b22      	cmp	r3, #34	@ 0x22
 8003b2a:	f040 80ae 	bne.w	8003c8a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b36:	d117      	bne.n	8003b68 <UART_Receive_IT+0x50>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d113      	bne.n	8003b68 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b48:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b60:	1c9a      	adds	r2, r3, #2
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b66:	e026      	b.n	8003bb6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b7a:	d007      	beq.n	8003b8c <UART_Receive_IT+0x74>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10a      	bne.n	8003b9a <UART_Receive_IT+0x82>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d106      	bne.n	8003b9a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	e008      	b.n	8003bac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003baa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d15d      	bne.n	8003c86 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0220 	bic.w	r2, r2, #32
 8003bd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003be8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0201 	bic.w	r2, r2, #1
 8003bf8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d135      	bne.n	8003c7c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	330c      	adds	r3, #12
 8003c1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	e853 3f00 	ldrex	r3, [r3]
 8003c24:	613b      	str	r3, [r7, #16]
   return(result);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f023 0310 	bic.w	r3, r3, #16
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	330c      	adds	r3, #12
 8003c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c36:	623a      	str	r2, [r7, #32]
 8003c38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3a:	69f9      	ldr	r1, [r7, #28]
 8003c3c:	6a3a      	ldr	r2, [r7, #32]
 8003c3e:	e841 2300 	strex	r3, r2, [r1]
 8003c42:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1e5      	bne.n	8003c16 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	2b10      	cmp	r3, #16
 8003c56:	d10a      	bne.n	8003c6e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c72:	4619      	mov	r1, r3
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7ff fdd1 	bl	800381c <HAL_UARTEx_RxEventCallback>
 8003c7a:	e002      	b.n	8003c82 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7fd f82b 	bl	8000cd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	e002      	b.n	8003c8c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e000      	b.n	8003c8c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c8a:	2302      	movs	r3, #2
  }
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3730      	adds	r7, #48	@ 0x30
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c98:	b0c0      	sub	sp, #256	@ 0x100
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb0:	68d9      	ldr	r1, [r3, #12]
 8003cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	ea40 0301 	orr.w	r3, r0, r1
 8003cbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003cec:	f021 010c 	bic.w	r1, r1, #12
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0e:	6999      	ldr	r1, [r3, #24]
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	ea40 0301 	orr.w	r3, r0, r1
 8003d1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4b8f      	ldr	r3, [pc, #572]	@ (8003f60 <UART_SetConfig+0x2cc>)
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d005      	beq.n	8003d34 <UART_SetConfig+0xa0>
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	4b8d      	ldr	r3, [pc, #564]	@ (8003f64 <UART_SetConfig+0x2d0>)
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d104      	bne.n	8003d3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d34:	f7fe fcb4 	bl	80026a0 <HAL_RCC_GetPCLK2Freq>
 8003d38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d3c:	e003      	b.n	8003d46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d3e:	f7fe fc9b 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 8003d42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d50:	f040 810c 	bne.w	8003f6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d66:	4622      	mov	r2, r4
 8003d68:	462b      	mov	r3, r5
 8003d6a:	1891      	adds	r1, r2, r2
 8003d6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d6e:	415b      	adcs	r3, r3
 8003d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d76:	4621      	mov	r1, r4
 8003d78:	eb12 0801 	adds.w	r8, r2, r1
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	eb43 0901 	adc.w	r9, r3, r1
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d96:	4690      	mov	r8, r2
 8003d98:	4699      	mov	r9, r3
 8003d9a:	4623      	mov	r3, r4
 8003d9c:	eb18 0303 	adds.w	r3, r8, r3
 8003da0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003da4:	462b      	mov	r3, r5
 8003da6:	eb49 0303 	adc.w	r3, r9, r3
 8003daa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003dbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	18db      	adds	r3, r3, r3
 8003dc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dc8:	4613      	mov	r3, r2
 8003dca:	eb42 0303 	adc.w	r3, r2, r3
 8003dce:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003dd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003dd8:	f7fc fa72 	bl	80002c0 <__aeabi_uldivmod>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4b61      	ldr	r3, [pc, #388]	@ (8003f68 <UART_SetConfig+0x2d4>)
 8003de2:	fba3 2302 	umull	r2, r3, r3, r2
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	011c      	lsls	r4, r3, #4
 8003dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003df4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003df8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003dfc:	4642      	mov	r2, r8
 8003dfe:	464b      	mov	r3, r9
 8003e00:	1891      	adds	r1, r2, r2
 8003e02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e04:	415b      	adcs	r3, r3
 8003e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	eb12 0a01 	adds.w	sl, r2, r1
 8003e12:	4649      	mov	r1, r9
 8003e14:	eb43 0b01 	adc.w	fp, r3, r1
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e2c:	4692      	mov	sl, r2
 8003e2e:	469b      	mov	fp, r3
 8003e30:	4643      	mov	r3, r8
 8003e32:	eb1a 0303 	adds.w	r3, sl, r3
 8003e36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e3a:	464b      	mov	r3, r9
 8003e3c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	18db      	adds	r3, r3, r3
 8003e5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e5e:	4613      	mov	r3, r2
 8003e60:	eb42 0303 	adc.w	r3, r2, r3
 8003e64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e6e:	f7fc fa27 	bl	80002c0 <__aeabi_uldivmod>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4611      	mov	r1, r2
 8003e78:	4b3b      	ldr	r3, [pc, #236]	@ (8003f68 <UART_SetConfig+0x2d4>)
 8003e7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	2264      	movs	r2, #100	@ 0x64
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	1acb      	subs	r3, r1, r3
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e8e:	4b36      	ldr	r3, [pc, #216]	@ (8003f68 <UART_SetConfig+0x2d4>)
 8003e90:	fba3 2302 	umull	r2, r3, r3, r2
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e9c:	441c      	add	r4, r3
 8003e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ea8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003eac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	1891      	adds	r1, r2, r2
 8003eb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003eb8:	415b      	adcs	r3, r3
 8003eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ebc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ec0:	4641      	mov	r1, r8
 8003ec2:	1851      	adds	r1, r2, r1
 8003ec4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	414b      	adcs	r3, r1
 8003eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ed8:	4659      	mov	r1, fp
 8003eda:	00cb      	lsls	r3, r1, #3
 8003edc:	4651      	mov	r1, sl
 8003ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ee2:	4651      	mov	r1, sl
 8003ee4:	00ca      	lsls	r2, r1, #3
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4603      	mov	r3, r0
 8003eec:	4642      	mov	r2, r8
 8003eee:	189b      	adds	r3, r3, r2
 8003ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ef4:	464b      	mov	r3, r9
 8003ef6:	460a      	mov	r2, r1
 8003ef8:	eb42 0303 	adc.w	r3, r2, r3
 8003efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f14:	460b      	mov	r3, r1
 8003f16:	18db      	adds	r3, r3, r3
 8003f18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	eb42 0303 	adc.w	r3, r2, r3
 8003f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f2a:	f7fc f9c9 	bl	80002c0 <__aeabi_uldivmod>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4b0d      	ldr	r3, [pc, #52]	@ (8003f68 <UART_SetConfig+0x2d4>)
 8003f34:	fba3 1302 	umull	r1, r3, r3, r2
 8003f38:	095b      	lsrs	r3, r3, #5
 8003f3a:	2164      	movs	r1, #100	@ 0x64
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	3332      	adds	r3, #50	@ 0x32
 8003f46:	4a08      	ldr	r2, [pc, #32]	@ (8003f68 <UART_SetConfig+0x2d4>)
 8003f48:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4c:	095b      	lsrs	r3, r3, #5
 8003f4e:	f003 0207 	and.w	r2, r3, #7
 8003f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4422      	add	r2, r4
 8003f5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f5c:	e106      	b.n	800416c <UART_SetConfig+0x4d8>
 8003f5e:	bf00      	nop
 8003f60:	40011000 	.word	0x40011000
 8003f64:	40011400 	.word	0x40011400
 8003f68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f70:	2200      	movs	r2, #0
 8003f72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f7e:	4642      	mov	r2, r8
 8003f80:	464b      	mov	r3, r9
 8003f82:	1891      	adds	r1, r2, r2
 8003f84:	6239      	str	r1, [r7, #32]
 8003f86:	415b      	adcs	r3, r3
 8003f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f8e:	4641      	mov	r1, r8
 8003f90:	1854      	adds	r4, r2, r1
 8003f92:	4649      	mov	r1, r9
 8003f94:	eb43 0501 	adc.w	r5, r3, r1
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	00eb      	lsls	r3, r5, #3
 8003fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fa6:	00e2      	lsls	r2, r4, #3
 8003fa8:	4614      	mov	r4, r2
 8003faa:	461d      	mov	r5, r3
 8003fac:	4643      	mov	r3, r8
 8003fae:	18e3      	adds	r3, r4, r3
 8003fb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fb4:	464b      	mov	r3, r9
 8003fb6:	eb45 0303 	adc.w	r3, r5, r3
 8003fba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	f04f 0300 	mov.w	r3, #0
 8003fd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fda:	4629      	mov	r1, r5
 8003fdc:	008b      	lsls	r3, r1, #2
 8003fde:	4621      	mov	r1, r4
 8003fe0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	008a      	lsls	r2, r1, #2
 8003fe8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003fec:	f7fc f968 	bl	80002c0 <__aeabi_uldivmod>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4b60      	ldr	r3, [pc, #384]	@ (8004178 <UART_SetConfig+0x4e4>)
 8003ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	011c      	lsls	r4, r3, #4
 8003ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004002:	2200      	movs	r2, #0
 8004004:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004008:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800400c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004010:	4642      	mov	r2, r8
 8004012:	464b      	mov	r3, r9
 8004014:	1891      	adds	r1, r2, r2
 8004016:	61b9      	str	r1, [r7, #24]
 8004018:	415b      	adcs	r3, r3
 800401a:	61fb      	str	r3, [r7, #28]
 800401c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004020:	4641      	mov	r1, r8
 8004022:	1851      	adds	r1, r2, r1
 8004024:	6139      	str	r1, [r7, #16]
 8004026:	4649      	mov	r1, r9
 8004028:	414b      	adcs	r3, r1
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004038:	4659      	mov	r1, fp
 800403a:	00cb      	lsls	r3, r1, #3
 800403c:	4651      	mov	r1, sl
 800403e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004042:	4651      	mov	r1, sl
 8004044:	00ca      	lsls	r2, r1, #3
 8004046:	4610      	mov	r0, r2
 8004048:	4619      	mov	r1, r3
 800404a:	4603      	mov	r3, r0
 800404c:	4642      	mov	r2, r8
 800404e:	189b      	adds	r3, r3, r2
 8004050:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004054:	464b      	mov	r3, r9
 8004056:	460a      	mov	r2, r1
 8004058:	eb42 0303 	adc.w	r3, r2, r3
 800405c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	67bb      	str	r3, [r7, #120]	@ 0x78
 800406a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004078:	4649      	mov	r1, r9
 800407a:	008b      	lsls	r3, r1, #2
 800407c:	4641      	mov	r1, r8
 800407e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004082:	4641      	mov	r1, r8
 8004084:	008a      	lsls	r2, r1, #2
 8004086:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800408a:	f7fc f919 	bl	80002c0 <__aeabi_uldivmod>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4611      	mov	r1, r2
 8004094:	4b38      	ldr	r3, [pc, #224]	@ (8004178 <UART_SetConfig+0x4e4>)
 8004096:	fba3 2301 	umull	r2, r3, r3, r1
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	2264      	movs	r2, #100	@ 0x64
 800409e:	fb02 f303 	mul.w	r3, r2, r3
 80040a2:	1acb      	subs	r3, r1, r3
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	3332      	adds	r3, #50	@ 0x32
 80040a8:	4a33      	ldr	r2, [pc, #204]	@ (8004178 <UART_SetConfig+0x4e4>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040b4:	441c      	add	r4, r3
 80040b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ba:	2200      	movs	r2, #0
 80040bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80040be:	677a      	str	r2, [r7, #116]	@ 0x74
 80040c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	1891      	adds	r1, r2, r2
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	415b      	adcs	r3, r3
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040d4:	4641      	mov	r1, r8
 80040d6:	1851      	adds	r1, r2, r1
 80040d8:	6039      	str	r1, [r7, #0]
 80040da:	4649      	mov	r1, r9
 80040dc:	414b      	adcs	r3, r1
 80040de:	607b      	str	r3, [r7, #4]
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040ec:	4659      	mov	r1, fp
 80040ee:	00cb      	lsls	r3, r1, #3
 80040f0:	4651      	mov	r1, sl
 80040f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f6:	4651      	mov	r1, sl
 80040f8:	00ca      	lsls	r2, r1, #3
 80040fa:	4610      	mov	r0, r2
 80040fc:	4619      	mov	r1, r3
 80040fe:	4603      	mov	r3, r0
 8004100:	4642      	mov	r2, r8
 8004102:	189b      	adds	r3, r3, r2
 8004104:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004106:	464b      	mov	r3, r9
 8004108:	460a      	mov	r2, r1
 800410a:	eb42 0303 	adc.w	r3, r2, r3
 800410e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	663b      	str	r3, [r7, #96]	@ 0x60
 800411a:	667a      	str	r2, [r7, #100]	@ 0x64
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004128:	4649      	mov	r1, r9
 800412a:	008b      	lsls	r3, r1, #2
 800412c:	4641      	mov	r1, r8
 800412e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004132:	4641      	mov	r1, r8
 8004134:	008a      	lsls	r2, r1, #2
 8004136:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800413a:	f7fc f8c1 	bl	80002c0 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4b0d      	ldr	r3, [pc, #52]	@ (8004178 <UART_SetConfig+0x4e4>)
 8004144:	fba3 1302 	umull	r1, r3, r3, r2
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	2164      	movs	r1, #100	@ 0x64
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	3332      	adds	r3, #50	@ 0x32
 8004156:	4a08      	ldr	r2, [pc, #32]	@ (8004178 <UART_SetConfig+0x4e4>)
 8004158:	fba2 2303 	umull	r2, r3, r2, r3
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	f003 020f 	and.w	r2, r3, #15
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4422      	add	r2, r4
 800416a:	609a      	str	r2, [r3, #8]
}
 800416c:	bf00      	nop
 800416e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004172:	46bd      	mov	sp, r7
 8004174:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004178:	51eb851f 	.word	0x51eb851f

0800417c <siprintf>:
 800417c:	b40e      	push	{r1, r2, r3}
 800417e:	b500      	push	{lr}
 8004180:	b09c      	sub	sp, #112	@ 0x70
 8004182:	ab1d      	add	r3, sp, #116	@ 0x74
 8004184:	9002      	str	r0, [sp, #8]
 8004186:	9006      	str	r0, [sp, #24]
 8004188:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800418c:	4809      	ldr	r0, [pc, #36]	@ (80041b4 <siprintf+0x38>)
 800418e:	9107      	str	r1, [sp, #28]
 8004190:	9104      	str	r1, [sp, #16]
 8004192:	4909      	ldr	r1, [pc, #36]	@ (80041b8 <siprintf+0x3c>)
 8004194:	f853 2b04 	ldr.w	r2, [r3], #4
 8004198:	9105      	str	r1, [sp, #20]
 800419a:	6800      	ldr	r0, [r0, #0]
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	a902      	add	r1, sp, #8
 80041a0:	f000 f994 	bl	80044cc <_svfiprintf_r>
 80041a4:	9b02      	ldr	r3, [sp, #8]
 80041a6:	2200      	movs	r2, #0
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	b01c      	add	sp, #112	@ 0x70
 80041ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80041b0:	b003      	add	sp, #12
 80041b2:	4770      	bx	lr
 80041b4:	20000010 	.word	0x20000010
 80041b8:	ffff0208 	.word	0xffff0208

080041bc <memset>:
 80041bc:	4402      	add	r2, r0
 80041be:	4603      	mov	r3, r0
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d100      	bne.n	80041c6 <memset+0xa>
 80041c4:	4770      	bx	lr
 80041c6:	f803 1b01 	strb.w	r1, [r3], #1
 80041ca:	e7f9      	b.n	80041c0 <memset+0x4>

080041cc <__errno>:
 80041cc:	4b01      	ldr	r3, [pc, #4]	@ (80041d4 <__errno+0x8>)
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	20000010 	.word	0x20000010

080041d8 <__libc_init_array>:
 80041d8:	b570      	push	{r4, r5, r6, lr}
 80041da:	4d0d      	ldr	r5, [pc, #52]	@ (8004210 <__libc_init_array+0x38>)
 80041dc:	4c0d      	ldr	r4, [pc, #52]	@ (8004214 <__libc_init_array+0x3c>)
 80041de:	1b64      	subs	r4, r4, r5
 80041e0:	10a4      	asrs	r4, r4, #2
 80041e2:	2600      	movs	r6, #0
 80041e4:	42a6      	cmp	r6, r4
 80041e6:	d109      	bne.n	80041fc <__libc_init_array+0x24>
 80041e8:	4d0b      	ldr	r5, [pc, #44]	@ (8004218 <__libc_init_array+0x40>)
 80041ea:	4c0c      	ldr	r4, [pc, #48]	@ (800421c <__libc_init_array+0x44>)
 80041ec:	f000 fc66 	bl	8004abc <_init>
 80041f0:	1b64      	subs	r4, r4, r5
 80041f2:	10a4      	asrs	r4, r4, #2
 80041f4:	2600      	movs	r6, #0
 80041f6:	42a6      	cmp	r6, r4
 80041f8:	d105      	bne.n	8004206 <__libc_init_array+0x2e>
 80041fa:	bd70      	pop	{r4, r5, r6, pc}
 80041fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004200:	4798      	blx	r3
 8004202:	3601      	adds	r6, #1
 8004204:	e7ee      	b.n	80041e4 <__libc_init_array+0xc>
 8004206:	f855 3b04 	ldr.w	r3, [r5], #4
 800420a:	4798      	blx	r3
 800420c:	3601      	adds	r6, #1
 800420e:	e7f2      	b.n	80041f6 <__libc_init_array+0x1e>
 8004210:	08004c38 	.word	0x08004c38
 8004214:	08004c38 	.word	0x08004c38
 8004218:	08004c38 	.word	0x08004c38
 800421c:	08004c3c 	.word	0x08004c3c

08004220 <__retarget_lock_acquire_recursive>:
 8004220:	4770      	bx	lr

08004222 <__retarget_lock_release_recursive>:
 8004222:	4770      	bx	lr

08004224 <_free_r>:
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	4605      	mov	r5, r0
 8004228:	2900      	cmp	r1, #0
 800422a:	d041      	beq.n	80042b0 <_free_r+0x8c>
 800422c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004230:	1f0c      	subs	r4, r1, #4
 8004232:	2b00      	cmp	r3, #0
 8004234:	bfb8      	it	lt
 8004236:	18e4      	addlt	r4, r4, r3
 8004238:	f000 f8e0 	bl	80043fc <__malloc_lock>
 800423c:	4a1d      	ldr	r2, [pc, #116]	@ (80042b4 <_free_r+0x90>)
 800423e:	6813      	ldr	r3, [r2, #0]
 8004240:	b933      	cbnz	r3, 8004250 <_free_r+0x2c>
 8004242:	6063      	str	r3, [r4, #4]
 8004244:	6014      	str	r4, [r2, #0]
 8004246:	4628      	mov	r0, r5
 8004248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800424c:	f000 b8dc 	b.w	8004408 <__malloc_unlock>
 8004250:	42a3      	cmp	r3, r4
 8004252:	d908      	bls.n	8004266 <_free_r+0x42>
 8004254:	6820      	ldr	r0, [r4, #0]
 8004256:	1821      	adds	r1, r4, r0
 8004258:	428b      	cmp	r3, r1
 800425a:	bf01      	itttt	eq
 800425c:	6819      	ldreq	r1, [r3, #0]
 800425e:	685b      	ldreq	r3, [r3, #4]
 8004260:	1809      	addeq	r1, r1, r0
 8004262:	6021      	streq	r1, [r4, #0]
 8004264:	e7ed      	b.n	8004242 <_free_r+0x1e>
 8004266:	461a      	mov	r2, r3
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	b10b      	cbz	r3, 8004270 <_free_r+0x4c>
 800426c:	42a3      	cmp	r3, r4
 800426e:	d9fa      	bls.n	8004266 <_free_r+0x42>
 8004270:	6811      	ldr	r1, [r2, #0]
 8004272:	1850      	adds	r0, r2, r1
 8004274:	42a0      	cmp	r0, r4
 8004276:	d10b      	bne.n	8004290 <_free_r+0x6c>
 8004278:	6820      	ldr	r0, [r4, #0]
 800427a:	4401      	add	r1, r0
 800427c:	1850      	adds	r0, r2, r1
 800427e:	4283      	cmp	r3, r0
 8004280:	6011      	str	r1, [r2, #0]
 8004282:	d1e0      	bne.n	8004246 <_free_r+0x22>
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	6053      	str	r3, [r2, #4]
 800428a:	4408      	add	r0, r1
 800428c:	6010      	str	r0, [r2, #0]
 800428e:	e7da      	b.n	8004246 <_free_r+0x22>
 8004290:	d902      	bls.n	8004298 <_free_r+0x74>
 8004292:	230c      	movs	r3, #12
 8004294:	602b      	str	r3, [r5, #0]
 8004296:	e7d6      	b.n	8004246 <_free_r+0x22>
 8004298:	6820      	ldr	r0, [r4, #0]
 800429a:	1821      	adds	r1, r4, r0
 800429c:	428b      	cmp	r3, r1
 800429e:	bf04      	itt	eq
 80042a0:	6819      	ldreq	r1, [r3, #0]
 80042a2:	685b      	ldreq	r3, [r3, #4]
 80042a4:	6063      	str	r3, [r4, #4]
 80042a6:	bf04      	itt	eq
 80042a8:	1809      	addeq	r1, r1, r0
 80042aa:	6021      	streq	r1, [r4, #0]
 80042ac:	6054      	str	r4, [r2, #4]
 80042ae:	e7ca      	b.n	8004246 <_free_r+0x22>
 80042b0:	bd38      	pop	{r3, r4, r5, pc}
 80042b2:	bf00      	nop
 80042b4:	20000260 	.word	0x20000260

080042b8 <sbrk_aligned>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	4e0f      	ldr	r6, [pc, #60]	@ (80042f8 <sbrk_aligned+0x40>)
 80042bc:	460c      	mov	r4, r1
 80042be:	6831      	ldr	r1, [r6, #0]
 80042c0:	4605      	mov	r5, r0
 80042c2:	b911      	cbnz	r1, 80042ca <sbrk_aligned+0x12>
 80042c4:	f000 fba6 	bl	8004a14 <_sbrk_r>
 80042c8:	6030      	str	r0, [r6, #0]
 80042ca:	4621      	mov	r1, r4
 80042cc:	4628      	mov	r0, r5
 80042ce:	f000 fba1 	bl	8004a14 <_sbrk_r>
 80042d2:	1c43      	adds	r3, r0, #1
 80042d4:	d103      	bne.n	80042de <sbrk_aligned+0x26>
 80042d6:	f04f 34ff 	mov.w	r4, #4294967295
 80042da:	4620      	mov	r0, r4
 80042dc:	bd70      	pop	{r4, r5, r6, pc}
 80042de:	1cc4      	adds	r4, r0, #3
 80042e0:	f024 0403 	bic.w	r4, r4, #3
 80042e4:	42a0      	cmp	r0, r4
 80042e6:	d0f8      	beq.n	80042da <sbrk_aligned+0x22>
 80042e8:	1a21      	subs	r1, r4, r0
 80042ea:	4628      	mov	r0, r5
 80042ec:	f000 fb92 	bl	8004a14 <_sbrk_r>
 80042f0:	3001      	adds	r0, #1
 80042f2:	d1f2      	bne.n	80042da <sbrk_aligned+0x22>
 80042f4:	e7ef      	b.n	80042d6 <sbrk_aligned+0x1e>
 80042f6:	bf00      	nop
 80042f8:	2000025c 	.word	0x2000025c

080042fc <_malloc_r>:
 80042fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004300:	1ccd      	adds	r5, r1, #3
 8004302:	f025 0503 	bic.w	r5, r5, #3
 8004306:	3508      	adds	r5, #8
 8004308:	2d0c      	cmp	r5, #12
 800430a:	bf38      	it	cc
 800430c:	250c      	movcc	r5, #12
 800430e:	2d00      	cmp	r5, #0
 8004310:	4606      	mov	r6, r0
 8004312:	db01      	blt.n	8004318 <_malloc_r+0x1c>
 8004314:	42a9      	cmp	r1, r5
 8004316:	d904      	bls.n	8004322 <_malloc_r+0x26>
 8004318:	230c      	movs	r3, #12
 800431a:	6033      	str	r3, [r6, #0]
 800431c:	2000      	movs	r0, #0
 800431e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004322:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043f8 <_malloc_r+0xfc>
 8004326:	f000 f869 	bl	80043fc <__malloc_lock>
 800432a:	f8d8 3000 	ldr.w	r3, [r8]
 800432e:	461c      	mov	r4, r3
 8004330:	bb44      	cbnz	r4, 8004384 <_malloc_r+0x88>
 8004332:	4629      	mov	r1, r5
 8004334:	4630      	mov	r0, r6
 8004336:	f7ff ffbf 	bl	80042b8 <sbrk_aligned>
 800433a:	1c43      	adds	r3, r0, #1
 800433c:	4604      	mov	r4, r0
 800433e:	d158      	bne.n	80043f2 <_malloc_r+0xf6>
 8004340:	f8d8 4000 	ldr.w	r4, [r8]
 8004344:	4627      	mov	r7, r4
 8004346:	2f00      	cmp	r7, #0
 8004348:	d143      	bne.n	80043d2 <_malloc_r+0xd6>
 800434a:	2c00      	cmp	r4, #0
 800434c:	d04b      	beq.n	80043e6 <_malloc_r+0xea>
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	4639      	mov	r1, r7
 8004352:	4630      	mov	r0, r6
 8004354:	eb04 0903 	add.w	r9, r4, r3
 8004358:	f000 fb5c 	bl	8004a14 <_sbrk_r>
 800435c:	4581      	cmp	r9, r0
 800435e:	d142      	bne.n	80043e6 <_malloc_r+0xea>
 8004360:	6821      	ldr	r1, [r4, #0]
 8004362:	1a6d      	subs	r5, r5, r1
 8004364:	4629      	mov	r1, r5
 8004366:	4630      	mov	r0, r6
 8004368:	f7ff ffa6 	bl	80042b8 <sbrk_aligned>
 800436c:	3001      	adds	r0, #1
 800436e:	d03a      	beq.n	80043e6 <_malloc_r+0xea>
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	442b      	add	r3, r5
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	f8d8 3000 	ldr.w	r3, [r8]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	bb62      	cbnz	r2, 80043d8 <_malloc_r+0xdc>
 800437e:	f8c8 7000 	str.w	r7, [r8]
 8004382:	e00f      	b.n	80043a4 <_malloc_r+0xa8>
 8004384:	6822      	ldr	r2, [r4, #0]
 8004386:	1b52      	subs	r2, r2, r5
 8004388:	d420      	bmi.n	80043cc <_malloc_r+0xd0>
 800438a:	2a0b      	cmp	r2, #11
 800438c:	d917      	bls.n	80043be <_malloc_r+0xc2>
 800438e:	1961      	adds	r1, r4, r5
 8004390:	42a3      	cmp	r3, r4
 8004392:	6025      	str	r5, [r4, #0]
 8004394:	bf18      	it	ne
 8004396:	6059      	strne	r1, [r3, #4]
 8004398:	6863      	ldr	r3, [r4, #4]
 800439a:	bf08      	it	eq
 800439c:	f8c8 1000 	streq.w	r1, [r8]
 80043a0:	5162      	str	r2, [r4, r5]
 80043a2:	604b      	str	r3, [r1, #4]
 80043a4:	4630      	mov	r0, r6
 80043a6:	f000 f82f 	bl	8004408 <__malloc_unlock>
 80043aa:	f104 000b 	add.w	r0, r4, #11
 80043ae:	1d23      	adds	r3, r4, #4
 80043b0:	f020 0007 	bic.w	r0, r0, #7
 80043b4:	1ac2      	subs	r2, r0, r3
 80043b6:	bf1c      	itt	ne
 80043b8:	1a1b      	subne	r3, r3, r0
 80043ba:	50a3      	strne	r3, [r4, r2]
 80043bc:	e7af      	b.n	800431e <_malloc_r+0x22>
 80043be:	6862      	ldr	r2, [r4, #4]
 80043c0:	42a3      	cmp	r3, r4
 80043c2:	bf0c      	ite	eq
 80043c4:	f8c8 2000 	streq.w	r2, [r8]
 80043c8:	605a      	strne	r2, [r3, #4]
 80043ca:	e7eb      	b.n	80043a4 <_malloc_r+0xa8>
 80043cc:	4623      	mov	r3, r4
 80043ce:	6864      	ldr	r4, [r4, #4]
 80043d0:	e7ae      	b.n	8004330 <_malloc_r+0x34>
 80043d2:	463c      	mov	r4, r7
 80043d4:	687f      	ldr	r7, [r7, #4]
 80043d6:	e7b6      	b.n	8004346 <_malloc_r+0x4a>
 80043d8:	461a      	mov	r2, r3
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	42a3      	cmp	r3, r4
 80043de:	d1fb      	bne.n	80043d8 <_malloc_r+0xdc>
 80043e0:	2300      	movs	r3, #0
 80043e2:	6053      	str	r3, [r2, #4]
 80043e4:	e7de      	b.n	80043a4 <_malloc_r+0xa8>
 80043e6:	230c      	movs	r3, #12
 80043e8:	6033      	str	r3, [r6, #0]
 80043ea:	4630      	mov	r0, r6
 80043ec:	f000 f80c 	bl	8004408 <__malloc_unlock>
 80043f0:	e794      	b.n	800431c <_malloc_r+0x20>
 80043f2:	6005      	str	r5, [r0, #0]
 80043f4:	e7d6      	b.n	80043a4 <_malloc_r+0xa8>
 80043f6:	bf00      	nop
 80043f8:	20000260 	.word	0x20000260

080043fc <__malloc_lock>:
 80043fc:	4801      	ldr	r0, [pc, #4]	@ (8004404 <__malloc_lock+0x8>)
 80043fe:	f7ff bf0f 	b.w	8004220 <__retarget_lock_acquire_recursive>
 8004402:	bf00      	nop
 8004404:	20000258 	.word	0x20000258

08004408 <__malloc_unlock>:
 8004408:	4801      	ldr	r0, [pc, #4]	@ (8004410 <__malloc_unlock+0x8>)
 800440a:	f7ff bf0a 	b.w	8004222 <__retarget_lock_release_recursive>
 800440e:	bf00      	nop
 8004410:	20000258 	.word	0x20000258

08004414 <__ssputs_r>:
 8004414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004418:	688e      	ldr	r6, [r1, #8]
 800441a:	461f      	mov	r7, r3
 800441c:	42be      	cmp	r6, r7
 800441e:	680b      	ldr	r3, [r1, #0]
 8004420:	4682      	mov	sl, r0
 8004422:	460c      	mov	r4, r1
 8004424:	4690      	mov	r8, r2
 8004426:	d82d      	bhi.n	8004484 <__ssputs_r+0x70>
 8004428:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800442c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004430:	d026      	beq.n	8004480 <__ssputs_r+0x6c>
 8004432:	6965      	ldr	r5, [r4, #20]
 8004434:	6909      	ldr	r1, [r1, #16]
 8004436:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800443a:	eba3 0901 	sub.w	r9, r3, r1
 800443e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004442:	1c7b      	adds	r3, r7, #1
 8004444:	444b      	add	r3, r9
 8004446:	106d      	asrs	r5, r5, #1
 8004448:	429d      	cmp	r5, r3
 800444a:	bf38      	it	cc
 800444c:	461d      	movcc	r5, r3
 800444e:	0553      	lsls	r3, r2, #21
 8004450:	d527      	bpl.n	80044a2 <__ssputs_r+0x8e>
 8004452:	4629      	mov	r1, r5
 8004454:	f7ff ff52 	bl	80042fc <_malloc_r>
 8004458:	4606      	mov	r6, r0
 800445a:	b360      	cbz	r0, 80044b6 <__ssputs_r+0xa2>
 800445c:	6921      	ldr	r1, [r4, #16]
 800445e:	464a      	mov	r2, r9
 8004460:	f000 fae8 	bl	8004a34 <memcpy>
 8004464:	89a3      	ldrh	r3, [r4, #12]
 8004466:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800446a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800446e:	81a3      	strh	r3, [r4, #12]
 8004470:	6126      	str	r6, [r4, #16]
 8004472:	6165      	str	r5, [r4, #20]
 8004474:	444e      	add	r6, r9
 8004476:	eba5 0509 	sub.w	r5, r5, r9
 800447a:	6026      	str	r6, [r4, #0]
 800447c:	60a5      	str	r5, [r4, #8]
 800447e:	463e      	mov	r6, r7
 8004480:	42be      	cmp	r6, r7
 8004482:	d900      	bls.n	8004486 <__ssputs_r+0x72>
 8004484:	463e      	mov	r6, r7
 8004486:	6820      	ldr	r0, [r4, #0]
 8004488:	4632      	mov	r2, r6
 800448a:	4641      	mov	r1, r8
 800448c:	f000 faa8 	bl	80049e0 <memmove>
 8004490:	68a3      	ldr	r3, [r4, #8]
 8004492:	1b9b      	subs	r3, r3, r6
 8004494:	60a3      	str	r3, [r4, #8]
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	4433      	add	r3, r6
 800449a:	6023      	str	r3, [r4, #0]
 800449c:	2000      	movs	r0, #0
 800449e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a2:	462a      	mov	r2, r5
 80044a4:	f000 fad4 	bl	8004a50 <_realloc_r>
 80044a8:	4606      	mov	r6, r0
 80044aa:	2800      	cmp	r0, #0
 80044ac:	d1e0      	bne.n	8004470 <__ssputs_r+0x5c>
 80044ae:	6921      	ldr	r1, [r4, #16]
 80044b0:	4650      	mov	r0, sl
 80044b2:	f7ff feb7 	bl	8004224 <_free_r>
 80044b6:	230c      	movs	r3, #12
 80044b8:	f8ca 3000 	str.w	r3, [sl]
 80044bc:	89a3      	ldrh	r3, [r4, #12]
 80044be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044c2:	81a3      	strh	r3, [r4, #12]
 80044c4:	f04f 30ff 	mov.w	r0, #4294967295
 80044c8:	e7e9      	b.n	800449e <__ssputs_r+0x8a>
	...

080044cc <_svfiprintf_r>:
 80044cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d0:	4698      	mov	r8, r3
 80044d2:	898b      	ldrh	r3, [r1, #12]
 80044d4:	061b      	lsls	r3, r3, #24
 80044d6:	b09d      	sub	sp, #116	@ 0x74
 80044d8:	4607      	mov	r7, r0
 80044da:	460d      	mov	r5, r1
 80044dc:	4614      	mov	r4, r2
 80044de:	d510      	bpl.n	8004502 <_svfiprintf_r+0x36>
 80044e0:	690b      	ldr	r3, [r1, #16]
 80044e2:	b973      	cbnz	r3, 8004502 <_svfiprintf_r+0x36>
 80044e4:	2140      	movs	r1, #64	@ 0x40
 80044e6:	f7ff ff09 	bl	80042fc <_malloc_r>
 80044ea:	6028      	str	r0, [r5, #0]
 80044ec:	6128      	str	r0, [r5, #16]
 80044ee:	b930      	cbnz	r0, 80044fe <_svfiprintf_r+0x32>
 80044f0:	230c      	movs	r3, #12
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	f04f 30ff 	mov.w	r0, #4294967295
 80044f8:	b01d      	add	sp, #116	@ 0x74
 80044fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044fe:	2340      	movs	r3, #64	@ 0x40
 8004500:	616b      	str	r3, [r5, #20]
 8004502:	2300      	movs	r3, #0
 8004504:	9309      	str	r3, [sp, #36]	@ 0x24
 8004506:	2320      	movs	r3, #32
 8004508:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800450c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004510:	2330      	movs	r3, #48	@ 0x30
 8004512:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80046b0 <_svfiprintf_r+0x1e4>
 8004516:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800451a:	f04f 0901 	mov.w	r9, #1
 800451e:	4623      	mov	r3, r4
 8004520:	469a      	mov	sl, r3
 8004522:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004526:	b10a      	cbz	r2, 800452c <_svfiprintf_r+0x60>
 8004528:	2a25      	cmp	r2, #37	@ 0x25
 800452a:	d1f9      	bne.n	8004520 <_svfiprintf_r+0x54>
 800452c:	ebba 0b04 	subs.w	fp, sl, r4
 8004530:	d00b      	beq.n	800454a <_svfiprintf_r+0x7e>
 8004532:	465b      	mov	r3, fp
 8004534:	4622      	mov	r2, r4
 8004536:	4629      	mov	r1, r5
 8004538:	4638      	mov	r0, r7
 800453a:	f7ff ff6b 	bl	8004414 <__ssputs_r>
 800453e:	3001      	adds	r0, #1
 8004540:	f000 80a7 	beq.w	8004692 <_svfiprintf_r+0x1c6>
 8004544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004546:	445a      	add	r2, fp
 8004548:	9209      	str	r2, [sp, #36]	@ 0x24
 800454a:	f89a 3000 	ldrb.w	r3, [sl]
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 809f 	beq.w	8004692 <_svfiprintf_r+0x1c6>
 8004554:	2300      	movs	r3, #0
 8004556:	f04f 32ff 	mov.w	r2, #4294967295
 800455a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800455e:	f10a 0a01 	add.w	sl, sl, #1
 8004562:	9304      	str	r3, [sp, #16]
 8004564:	9307      	str	r3, [sp, #28]
 8004566:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800456a:	931a      	str	r3, [sp, #104]	@ 0x68
 800456c:	4654      	mov	r4, sl
 800456e:	2205      	movs	r2, #5
 8004570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004574:	484e      	ldr	r0, [pc, #312]	@ (80046b0 <_svfiprintf_r+0x1e4>)
 8004576:	f7fb fe53 	bl	8000220 <memchr>
 800457a:	9a04      	ldr	r2, [sp, #16]
 800457c:	b9d8      	cbnz	r0, 80045b6 <_svfiprintf_r+0xea>
 800457e:	06d0      	lsls	r0, r2, #27
 8004580:	bf44      	itt	mi
 8004582:	2320      	movmi	r3, #32
 8004584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004588:	0711      	lsls	r1, r2, #28
 800458a:	bf44      	itt	mi
 800458c:	232b      	movmi	r3, #43	@ 0x2b
 800458e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004592:	f89a 3000 	ldrb.w	r3, [sl]
 8004596:	2b2a      	cmp	r3, #42	@ 0x2a
 8004598:	d015      	beq.n	80045c6 <_svfiprintf_r+0xfa>
 800459a:	9a07      	ldr	r2, [sp, #28]
 800459c:	4654      	mov	r4, sl
 800459e:	2000      	movs	r0, #0
 80045a0:	f04f 0c0a 	mov.w	ip, #10
 80045a4:	4621      	mov	r1, r4
 80045a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045aa:	3b30      	subs	r3, #48	@ 0x30
 80045ac:	2b09      	cmp	r3, #9
 80045ae:	d94b      	bls.n	8004648 <_svfiprintf_r+0x17c>
 80045b0:	b1b0      	cbz	r0, 80045e0 <_svfiprintf_r+0x114>
 80045b2:	9207      	str	r2, [sp, #28]
 80045b4:	e014      	b.n	80045e0 <_svfiprintf_r+0x114>
 80045b6:	eba0 0308 	sub.w	r3, r0, r8
 80045ba:	fa09 f303 	lsl.w	r3, r9, r3
 80045be:	4313      	orrs	r3, r2
 80045c0:	9304      	str	r3, [sp, #16]
 80045c2:	46a2      	mov	sl, r4
 80045c4:	e7d2      	b.n	800456c <_svfiprintf_r+0xa0>
 80045c6:	9b03      	ldr	r3, [sp, #12]
 80045c8:	1d19      	adds	r1, r3, #4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	9103      	str	r1, [sp, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	bfbb      	ittet	lt
 80045d2:	425b      	neglt	r3, r3
 80045d4:	f042 0202 	orrlt.w	r2, r2, #2
 80045d8:	9307      	strge	r3, [sp, #28]
 80045da:	9307      	strlt	r3, [sp, #28]
 80045dc:	bfb8      	it	lt
 80045de:	9204      	strlt	r2, [sp, #16]
 80045e0:	7823      	ldrb	r3, [r4, #0]
 80045e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80045e4:	d10a      	bne.n	80045fc <_svfiprintf_r+0x130>
 80045e6:	7863      	ldrb	r3, [r4, #1]
 80045e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80045ea:	d132      	bne.n	8004652 <_svfiprintf_r+0x186>
 80045ec:	9b03      	ldr	r3, [sp, #12]
 80045ee:	1d1a      	adds	r2, r3, #4
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	9203      	str	r2, [sp, #12]
 80045f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045f8:	3402      	adds	r4, #2
 80045fa:	9305      	str	r3, [sp, #20]
 80045fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80046c0 <_svfiprintf_r+0x1f4>
 8004600:	7821      	ldrb	r1, [r4, #0]
 8004602:	2203      	movs	r2, #3
 8004604:	4650      	mov	r0, sl
 8004606:	f7fb fe0b 	bl	8000220 <memchr>
 800460a:	b138      	cbz	r0, 800461c <_svfiprintf_r+0x150>
 800460c:	9b04      	ldr	r3, [sp, #16]
 800460e:	eba0 000a 	sub.w	r0, r0, sl
 8004612:	2240      	movs	r2, #64	@ 0x40
 8004614:	4082      	lsls	r2, r0
 8004616:	4313      	orrs	r3, r2
 8004618:	3401      	adds	r4, #1
 800461a:	9304      	str	r3, [sp, #16]
 800461c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004620:	4824      	ldr	r0, [pc, #144]	@ (80046b4 <_svfiprintf_r+0x1e8>)
 8004622:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004626:	2206      	movs	r2, #6
 8004628:	f7fb fdfa 	bl	8000220 <memchr>
 800462c:	2800      	cmp	r0, #0
 800462e:	d036      	beq.n	800469e <_svfiprintf_r+0x1d2>
 8004630:	4b21      	ldr	r3, [pc, #132]	@ (80046b8 <_svfiprintf_r+0x1ec>)
 8004632:	bb1b      	cbnz	r3, 800467c <_svfiprintf_r+0x1b0>
 8004634:	9b03      	ldr	r3, [sp, #12]
 8004636:	3307      	adds	r3, #7
 8004638:	f023 0307 	bic.w	r3, r3, #7
 800463c:	3308      	adds	r3, #8
 800463e:	9303      	str	r3, [sp, #12]
 8004640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004642:	4433      	add	r3, r6
 8004644:	9309      	str	r3, [sp, #36]	@ 0x24
 8004646:	e76a      	b.n	800451e <_svfiprintf_r+0x52>
 8004648:	fb0c 3202 	mla	r2, ip, r2, r3
 800464c:	460c      	mov	r4, r1
 800464e:	2001      	movs	r0, #1
 8004650:	e7a8      	b.n	80045a4 <_svfiprintf_r+0xd8>
 8004652:	2300      	movs	r3, #0
 8004654:	3401      	adds	r4, #1
 8004656:	9305      	str	r3, [sp, #20]
 8004658:	4619      	mov	r1, r3
 800465a:	f04f 0c0a 	mov.w	ip, #10
 800465e:	4620      	mov	r0, r4
 8004660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004664:	3a30      	subs	r2, #48	@ 0x30
 8004666:	2a09      	cmp	r2, #9
 8004668:	d903      	bls.n	8004672 <_svfiprintf_r+0x1a6>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0c6      	beq.n	80045fc <_svfiprintf_r+0x130>
 800466e:	9105      	str	r1, [sp, #20]
 8004670:	e7c4      	b.n	80045fc <_svfiprintf_r+0x130>
 8004672:	fb0c 2101 	mla	r1, ip, r1, r2
 8004676:	4604      	mov	r4, r0
 8004678:	2301      	movs	r3, #1
 800467a:	e7f0      	b.n	800465e <_svfiprintf_r+0x192>
 800467c:	ab03      	add	r3, sp, #12
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	462a      	mov	r2, r5
 8004682:	4b0e      	ldr	r3, [pc, #56]	@ (80046bc <_svfiprintf_r+0x1f0>)
 8004684:	a904      	add	r1, sp, #16
 8004686:	4638      	mov	r0, r7
 8004688:	f3af 8000 	nop.w
 800468c:	1c42      	adds	r2, r0, #1
 800468e:	4606      	mov	r6, r0
 8004690:	d1d6      	bne.n	8004640 <_svfiprintf_r+0x174>
 8004692:	89ab      	ldrh	r3, [r5, #12]
 8004694:	065b      	lsls	r3, r3, #25
 8004696:	f53f af2d 	bmi.w	80044f4 <_svfiprintf_r+0x28>
 800469a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800469c:	e72c      	b.n	80044f8 <_svfiprintf_r+0x2c>
 800469e:	ab03      	add	r3, sp, #12
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	462a      	mov	r2, r5
 80046a4:	4b05      	ldr	r3, [pc, #20]	@ (80046bc <_svfiprintf_r+0x1f0>)
 80046a6:	a904      	add	r1, sp, #16
 80046a8:	4638      	mov	r0, r7
 80046aa:	f000 f879 	bl	80047a0 <_printf_i>
 80046ae:	e7ed      	b.n	800468c <_svfiprintf_r+0x1c0>
 80046b0:	08004bfc 	.word	0x08004bfc
 80046b4:	08004c06 	.word	0x08004c06
 80046b8:	00000000 	.word	0x00000000
 80046bc:	08004415 	.word	0x08004415
 80046c0:	08004c02 	.word	0x08004c02

080046c4 <_printf_common>:
 80046c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c8:	4616      	mov	r6, r2
 80046ca:	4698      	mov	r8, r3
 80046cc:	688a      	ldr	r2, [r1, #8]
 80046ce:	690b      	ldr	r3, [r1, #16]
 80046d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046d4:	4293      	cmp	r3, r2
 80046d6:	bfb8      	it	lt
 80046d8:	4613      	movlt	r3, r2
 80046da:	6033      	str	r3, [r6, #0]
 80046dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046e0:	4607      	mov	r7, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	b10a      	cbz	r2, 80046ea <_printf_common+0x26>
 80046e6:	3301      	adds	r3, #1
 80046e8:	6033      	str	r3, [r6, #0]
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	0699      	lsls	r1, r3, #26
 80046ee:	bf42      	ittt	mi
 80046f0:	6833      	ldrmi	r3, [r6, #0]
 80046f2:	3302      	addmi	r3, #2
 80046f4:	6033      	strmi	r3, [r6, #0]
 80046f6:	6825      	ldr	r5, [r4, #0]
 80046f8:	f015 0506 	ands.w	r5, r5, #6
 80046fc:	d106      	bne.n	800470c <_printf_common+0x48>
 80046fe:	f104 0a19 	add.w	sl, r4, #25
 8004702:	68e3      	ldr	r3, [r4, #12]
 8004704:	6832      	ldr	r2, [r6, #0]
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	42ab      	cmp	r3, r5
 800470a:	dc26      	bgt.n	800475a <_printf_common+0x96>
 800470c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004710:	6822      	ldr	r2, [r4, #0]
 8004712:	3b00      	subs	r3, #0
 8004714:	bf18      	it	ne
 8004716:	2301      	movne	r3, #1
 8004718:	0692      	lsls	r2, r2, #26
 800471a:	d42b      	bmi.n	8004774 <_printf_common+0xb0>
 800471c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004720:	4641      	mov	r1, r8
 8004722:	4638      	mov	r0, r7
 8004724:	47c8      	blx	r9
 8004726:	3001      	adds	r0, #1
 8004728:	d01e      	beq.n	8004768 <_printf_common+0xa4>
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	6922      	ldr	r2, [r4, #16]
 800472e:	f003 0306 	and.w	r3, r3, #6
 8004732:	2b04      	cmp	r3, #4
 8004734:	bf02      	ittt	eq
 8004736:	68e5      	ldreq	r5, [r4, #12]
 8004738:	6833      	ldreq	r3, [r6, #0]
 800473a:	1aed      	subeq	r5, r5, r3
 800473c:	68a3      	ldr	r3, [r4, #8]
 800473e:	bf0c      	ite	eq
 8004740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004744:	2500      	movne	r5, #0
 8004746:	4293      	cmp	r3, r2
 8004748:	bfc4      	itt	gt
 800474a:	1a9b      	subgt	r3, r3, r2
 800474c:	18ed      	addgt	r5, r5, r3
 800474e:	2600      	movs	r6, #0
 8004750:	341a      	adds	r4, #26
 8004752:	42b5      	cmp	r5, r6
 8004754:	d11a      	bne.n	800478c <_printf_common+0xc8>
 8004756:	2000      	movs	r0, #0
 8004758:	e008      	b.n	800476c <_printf_common+0xa8>
 800475a:	2301      	movs	r3, #1
 800475c:	4652      	mov	r2, sl
 800475e:	4641      	mov	r1, r8
 8004760:	4638      	mov	r0, r7
 8004762:	47c8      	blx	r9
 8004764:	3001      	adds	r0, #1
 8004766:	d103      	bne.n	8004770 <_printf_common+0xac>
 8004768:	f04f 30ff 	mov.w	r0, #4294967295
 800476c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004770:	3501      	adds	r5, #1
 8004772:	e7c6      	b.n	8004702 <_printf_common+0x3e>
 8004774:	18e1      	adds	r1, r4, r3
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	2030      	movs	r0, #48	@ 0x30
 800477a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800477e:	4422      	add	r2, r4
 8004780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004788:	3302      	adds	r3, #2
 800478a:	e7c7      	b.n	800471c <_printf_common+0x58>
 800478c:	2301      	movs	r3, #1
 800478e:	4622      	mov	r2, r4
 8004790:	4641      	mov	r1, r8
 8004792:	4638      	mov	r0, r7
 8004794:	47c8      	blx	r9
 8004796:	3001      	adds	r0, #1
 8004798:	d0e6      	beq.n	8004768 <_printf_common+0xa4>
 800479a:	3601      	adds	r6, #1
 800479c:	e7d9      	b.n	8004752 <_printf_common+0x8e>
	...

080047a0 <_printf_i>:
 80047a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047a4:	7e0f      	ldrb	r7, [r1, #24]
 80047a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047a8:	2f78      	cmp	r7, #120	@ 0x78
 80047aa:	4691      	mov	r9, r2
 80047ac:	4680      	mov	r8, r0
 80047ae:	460c      	mov	r4, r1
 80047b0:	469a      	mov	sl, r3
 80047b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047b6:	d807      	bhi.n	80047c8 <_printf_i+0x28>
 80047b8:	2f62      	cmp	r7, #98	@ 0x62
 80047ba:	d80a      	bhi.n	80047d2 <_printf_i+0x32>
 80047bc:	2f00      	cmp	r7, #0
 80047be:	f000 80d2 	beq.w	8004966 <_printf_i+0x1c6>
 80047c2:	2f58      	cmp	r7, #88	@ 0x58
 80047c4:	f000 80b9 	beq.w	800493a <_printf_i+0x19a>
 80047c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047d0:	e03a      	b.n	8004848 <_printf_i+0xa8>
 80047d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047d6:	2b15      	cmp	r3, #21
 80047d8:	d8f6      	bhi.n	80047c8 <_printf_i+0x28>
 80047da:	a101      	add	r1, pc, #4	@ (adr r1, 80047e0 <_printf_i+0x40>)
 80047dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047e0:	08004839 	.word	0x08004839
 80047e4:	0800484d 	.word	0x0800484d
 80047e8:	080047c9 	.word	0x080047c9
 80047ec:	080047c9 	.word	0x080047c9
 80047f0:	080047c9 	.word	0x080047c9
 80047f4:	080047c9 	.word	0x080047c9
 80047f8:	0800484d 	.word	0x0800484d
 80047fc:	080047c9 	.word	0x080047c9
 8004800:	080047c9 	.word	0x080047c9
 8004804:	080047c9 	.word	0x080047c9
 8004808:	080047c9 	.word	0x080047c9
 800480c:	0800494d 	.word	0x0800494d
 8004810:	08004877 	.word	0x08004877
 8004814:	08004907 	.word	0x08004907
 8004818:	080047c9 	.word	0x080047c9
 800481c:	080047c9 	.word	0x080047c9
 8004820:	0800496f 	.word	0x0800496f
 8004824:	080047c9 	.word	0x080047c9
 8004828:	08004877 	.word	0x08004877
 800482c:	080047c9 	.word	0x080047c9
 8004830:	080047c9 	.word	0x080047c9
 8004834:	0800490f 	.word	0x0800490f
 8004838:	6833      	ldr	r3, [r6, #0]
 800483a:	1d1a      	adds	r2, r3, #4
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6032      	str	r2, [r6, #0]
 8004840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004848:	2301      	movs	r3, #1
 800484a:	e09d      	b.n	8004988 <_printf_i+0x1e8>
 800484c:	6833      	ldr	r3, [r6, #0]
 800484e:	6820      	ldr	r0, [r4, #0]
 8004850:	1d19      	adds	r1, r3, #4
 8004852:	6031      	str	r1, [r6, #0]
 8004854:	0606      	lsls	r6, r0, #24
 8004856:	d501      	bpl.n	800485c <_printf_i+0xbc>
 8004858:	681d      	ldr	r5, [r3, #0]
 800485a:	e003      	b.n	8004864 <_printf_i+0xc4>
 800485c:	0645      	lsls	r5, r0, #25
 800485e:	d5fb      	bpl.n	8004858 <_printf_i+0xb8>
 8004860:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004864:	2d00      	cmp	r5, #0
 8004866:	da03      	bge.n	8004870 <_printf_i+0xd0>
 8004868:	232d      	movs	r3, #45	@ 0x2d
 800486a:	426d      	negs	r5, r5
 800486c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004870:	4859      	ldr	r0, [pc, #356]	@ (80049d8 <_printf_i+0x238>)
 8004872:	230a      	movs	r3, #10
 8004874:	e011      	b.n	800489a <_printf_i+0xfa>
 8004876:	6821      	ldr	r1, [r4, #0]
 8004878:	6833      	ldr	r3, [r6, #0]
 800487a:	0608      	lsls	r0, r1, #24
 800487c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004880:	d402      	bmi.n	8004888 <_printf_i+0xe8>
 8004882:	0649      	lsls	r1, r1, #25
 8004884:	bf48      	it	mi
 8004886:	b2ad      	uxthmi	r5, r5
 8004888:	2f6f      	cmp	r7, #111	@ 0x6f
 800488a:	4853      	ldr	r0, [pc, #332]	@ (80049d8 <_printf_i+0x238>)
 800488c:	6033      	str	r3, [r6, #0]
 800488e:	bf14      	ite	ne
 8004890:	230a      	movne	r3, #10
 8004892:	2308      	moveq	r3, #8
 8004894:	2100      	movs	r1, #0
 8004896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800489a:	6866      	ldr	r6, [r4, #4]
 800489c:	60a6      	str	r6, [r4, #8]
 800489e:	2e00      	cmp	r6, #0
 80048a0:	bfa2      	ittt	ge
 80048a2:	6821      	ldrge	r1, [r4, #0]
 80048a4:	f021 0104 	bicge.w	r1, r1, #4
 80048a8:	6021      	strge	r1, [r4, #0]
 80048aa:	b90d      	cbnz	r5, 80048b0 <_printf_i+0x110>
 80048ac:	2e00      	cmp	r6, #0
 80048ae:	d04b      	beq.n	8004948 <_printf_i+0x1a8>
 80048b0:	4616      	mov	r6, r2
 80048b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80048b6:	fb03 5711 	mls	r7, r3, r1, r5
 80048ba:	5dc7      	ldrb	r7, [r0, r7]
 80048bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048c0:	462f      	mov	r7, r5
 80048c2:	42bb      	cmp	r3, r7
 80048c4:	460d      	mov	r5, r1
 80048c6:	d9f4      	bls.n	80048b2 <_printf_i+0x112>
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d10b      	bne.n	80048e4 <_printf_i+0x144>
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	07df      	lsls	r7, r3, #31
 80048d0:	d508      	bpl.n	80048e4 <_printf_i+0x144>
 80048d2:	6923      	ldr	r3, [r4, #16]
 80048d4:	6861      	ldr	r1, [r4, #4]
 80048d6:	4299      	cmp	r1, r3
 80048d8:	bfde      	ittt	le
 80048da:	2330      	movle	r3, #48	@ 0x30
 80048dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048e4:	1b92      	subs	r2, r2, r6
 80048e6:	6122      	str	r2, [r4, #16]
 80048e8:	f8cd a000 	str.w	sl, [sp]
 80048ec:	464b      	mov	r3, r9
 80048ee:	aa03      	add	r2, sp, #12
 80048f0:	4621      	mov	r1, r4
 80048f2:	4640      	mov	r0, r8
 80048f4:	f7ff fee6 	bl	80046c4 <_printf_common>
 80048f8:	3001      	adds	r0, #1
 80048fa:	d14a      	bne.n	8004992 <_printf_i+0x1f2>
 80048fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004900:	b004      	add	sp, #16
 8004902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	f043 0320 	orr.w	r3, r3, #32
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	4833      	ldr	r0, [pc, #204]	@ (80049dc <_printf_i+0x23c>)
 8004910:	2778      	movs	r7, #120	@ 0x78
 8004912:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	6831      	ldr	r1, [r6, #0]
 800491a:	061f      	lsls	r7, r3, #24
 800491c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004920:	d402      	bmi.n	8004928 <_printf_i+0x188>
 8004922:	065f      	lsls	r7, r3, #25
 8004924:	bf48      	it	mi
 8004926:	b2ad      	uxthmi	r5, r5
 8004928:	6031      	str	r1, [r6, #0]
 800492a:	07d9      	lsls	r1, r3, #31
 800492c:	bf44      	itt	mi
 800492e:	f043 0320 	orrmi.w	r3, r3, #32
 8004932:	6023      	strmi	r3, [r4, #0]
 8004934:	b11d      	cbz	r5, 800493e <_printf_i+0x19e>
 8004936:	2310      	movs	r3, #16
 8004938:	e7ac      	b.n	8004894 <_printf_i+0xf4>
 800493a:	4827      	ldr	r0, [pc, #156]	@ (80049d8 <_printf_i+0x238>)
 800493c:	e7e9      	b.n	8004912 <_printf_i+0x172>
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	f023 0320 	bic.w	r3, r3, #32
 8004944:	6023      	str	r3, [r4, #0]
 8004946:	e7f6      	b.n	8004936 <_printf_i+0x196>
 8004948:	4616      	mov	r6, r2
 800494a:	e7bd      	b.n	80048c8 <_printf_i+0x128>
 800494c:	6833      	ldr	r3, [r6, #0]
 800494e:	6825      	ldr	r5, [r4, #0]
 8004950:	6961      	ldr	r1, [r4, #20]
 8004952:	1d18      	adds	r0, r3, #4
 8004954:	6030      	str	r0, [r6, #0]
 8004956:	062e      	lsls	r6, r5, #24
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	d501      	bpl.n	8004960 <_printf_i+0x1c0>
 800495c:	6019      	str	r1, [r3, #0]
 800495e:	e002      	b.n	8004966 <_printf_i+0x1c6>
 8004960:	0668      	lsls	r0, r5, #25
 8004962:	d5fb      	bpl.n	800495c <_printf_i+0x1bc>
 8004964:	8019      	strh	r1, [r3, #0]
 8004966:	2300      	movs	r3, #0
 8004968:	6123      	str	r3, [r4, #16]
 800496a:	4616      	mov	r6, r2
 800496c:	e7bc      	b.n	80048e8 <_printf_i+0x148>
 800496e:	6833      	ldr	r3, [r6, #0]
 8004970:	1d1a      	adds	r2, r3, #4
 8004972:	6032      	str	r2, [r6, #0]
 8004974:	681e      	ldr	r6, [r3, #0]
 8004976:	6862      	ldr	r2, [r4, #4]
 8004978:	2100      	movs	r1, #0
 800497a:	4630      	mov	r0, r6
 800497c:	f7fb fc50 	bl	8000220 <memchr>
 8004980:	b108      	cbz	r0, 8004986 <_printf_i+0x1e6>
 8004982:	1b80      	subs	r0, r0, r6
 8004984:	6060      	str	r0, [r4, #4]
 8004986:	6863      	ldr	r3, [r4, #4]
 8004988:	6123      	str	r3, [r4, #16]
 800498a:	2300      	movs	r3, #0
 800498c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004990:	e7aa      	b.n	80048e8 <_printf_i+0x148>
 8004992:	6923      	ldr	r3, [r4, #16]
 8004994:	4632      	mov	r2, r6
 8004996:	4649      	mov	r1, r9
 8004998:	4640      	mov	r0, r8
 800499a:	47d0      	blx	sl
 800499c:	3001      	adds	r0, #1
 800499e:	d0ad      	beq.n	80048fc <_printf_i+0x15c>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	079b      	lsls	r3, r3, #30
 80049a4:	d413      	bmi.n	80049ce <_printf_i+0x22e>
 80049a6:	68e0      	ldr	r0, [r4, #12]
 80049a8:	9b03      	ldr	r3, [sp, #12]
 80049aa:	4298      	cmp	r0, r3
 80049ac:	bfb8      	it	lt
 80049ae:	4618      	movlt	r0, r3
 80049b0:	e7a6      	b.n	8004900 <_printf_i+0x160>
 80049b2:	2301      	movs	r3, #1
 80049b4:	4632      	mov	r2, r6
 80049b6:	4649      	mov	r1, r9
 80049b8:	4640      	mov	r0, r8
 80049ba:	47d0      	blx	sl
 80049bc:	3001      	adds	r0, #1
 80049be:	d09d      	beq.n	80048fc <_printf_i+0x15c>
 80049c0:	3501      	adds	r5, #1
 80049c2:	68e3      	ldr	r3, [r4, #12]
 80049c4:	9903      	ldr	r1, [sp, #12]
 80049c6:	1a5b      	subs	r3, r3, r1
 80049c8:	42ab      	cmp	r3, r5
 80049ca:	dcf2      	bgt.n	80049b2 <_printf_i+0x212>
 80049cc:	e7eb      	b.n	80049a6 <_printf_i+0x206>
 80049ce:	2500      	movs	r5, #0
 80049d0:	f104 0619 	add.w	r6, r4, #25
 80049d4:	e7f5      	b.n	80049c2 <_printf_i+0x222>
 80049d6:	bf00      	nop
 80049d8:	08004c0d 	.word	0x08004c0d
 80049dc:	08004c1e 	.word	0x08004c1e

080049e0 <memmove>:
 80049e0:	4288      	cmp	r0, r1
 80049e2:	b510      	push	{r4, lr}
 80049e4:	eb01 0402 	add.w	r4, r1, r2
 80049e8:	d902      	bls.n	80049f0 <memmove+0x10>
 80049ea:	4284      	cmp	r4, r0
 80049ec:	4623      	mov	r3, r4
 80049ee:	d807      	bhi.n	8004a00 <memmove+0x20>
 80049f0:	1e43      	subs	r3, r0, #1
 80049f2:	42a1      	cmp	r1, r4
 80049f4:	d008      	beq.n	8004a08 <memmove+0x28>
 80049f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049fe:	e7f8      	b.n	80049f2 <memmove+0x12>
 8004a00:	4402      	add	r2, r0
 8004a02:	4601      	mov	r1, r0
 8004a04:	428a      	cmp	r2, r1
 8004a06:	d100      	bne.n	8004a0a <memmove+0x2a>
 8004a08:	bd10      	pop	{r4, pc}
 8004a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a12:	e7f7      	b.n	8004a04 <memmove+0x24>

08004a14 <_sbrk_r>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	4d06      	ldr	r5, [pc, #24]	@ (8004a30 <_sbrk_r+0x1c>)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	4608      	mov	r0, r1
 8004a1e:	602b      	str	r3, [r5, #0]
 8004a20:	f7fc fa76 	bl	8000f10 <_sbrk>
 8004a24:	1c43      	adds	r3, r0, #1
 8004a26:	d102      	bne.n	8004a2e <_sbrk_r+0x1a>
 8004a28:	682b      	ldr	r3, [r5, #0]
 8004a2a:	b103      	cbz	r3, 8004a2e <_sbrk_r+0x1a>
 8004a2c:	6023      	str	r3, [r4, #0]
 8004a2e:	bd38      	pop	{r3, r4, r5, pc}
 8004a30:	20000254 	.word	0x20000254

08004a34 <memcpy>:
 8004a34:	440a      	add	r2, r1
 8004a36:	4291      	cmp	r1, r2
 8004a38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a3c:	d100      	bne.n	8004a40 <memcpy+0xc>
 8004a3e:	4770      	bx	lr
 8004a40:	b510      	push	{r4, lr}
 8004a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a4a:	4291      	cmp	r1, r2
 8004a4c:	d1f9      	bne.n	8004a42 <memcpy+0xe>
 8004a4e:	bd10      	pop	{r4, pc}

08004a50 <_realloc_r>:
 8004a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a54:	4680      	mov	r8, r0
 8004a56:	4615      	mov	r5, r2
 8004a58:	460c      	mov	r4, r1
 8004a5a:	b921      	cbnz	r1, 8004a66 <_realloc_r+0x16>
 8004a5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a60:	4611      	mov	r1, r2
 8004a62:	f7ff bc4b 	b.w	80042fc <_malloc_r>
 8004a66:	b92a      	cbnz	r2, 8004a74 <_realloc_r+0x24>
 8004a68:	f7ff fbdc 	bl	8004224 <_free_r>
 8004a6c:	2400      	movs	r4, #0
 8004a6e:	4620      	mov	r0, r4
 8004a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a74:	f000 f81a 	bl	8004aac <_malloc_usable_size_r>
 8004a78:	4285      	cmp	r5, r0
 8004a7a:	4606      	mov	r6, r0
 8004a7c:	d802      	bhi.n	8004a84 <_realloc_r+0x34>
 8004a7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004a82:	d8f4      	bhi.n	8004a6e <_realloc_r+0x1e>
 8004a84:	4629      	mov	r1, r5
 8004a86:	4640      	mov	r0, r8
 8004a88:	f7ff fc38 	bl	80042fc <_malloc_r>
 8004a8c:	4607      	mov	r7, r0
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	d0ec      	beq.n	8004a6c <_realloc_r+0x1c>
 8004a92:	42b5      	cmp	r5, r6
 8004a94:	462a      	mov	r2, r5
 8004a96:	4621      	mov	r1, r4
 8004a98:	bf28      	it	cs
 8004a9a:	4632      	movcs	r2, r6
 8004a9c:	f7ff ffca 	bl	8004a34 <memcpy>
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	4640      	mov	r0, r8
 8004aa4:	f7ff fbbe 	bl	8004224 <_free_r>
 8004aa8:	463c      	mov	r4, r7
 8004aaa:	e7e0      	b.n	8004a6e <_realloc_r+0x1e>

08004aac <_malloc_usable_size_r>:
 8004aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ab0:	1f18      	subs	r0, r3, #4
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	bfbc      	itt	lt
 8004ab6:	580b      	ldrlt	r3, [r1, r0]
 8004ab8:	18c0      	addlt	r0, r0, r3
 8004aba:	4770      	bx	lr

08004abc <_init>:
 8004abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004abe:	bf00      	nop
 8004ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac2:	bc08      	pop	{r3}
 8004ac4:	469e      	mov	lr, r3
 8004ac6:	4770      	bx	lr

08004ac8 <_fini>:
 8004ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aca:	bf00      	nop
 8004acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ace:	bc08      	pop	{r3}
 8004ad0:	469e      	mov	lr, r3
 8004ad2:	4770      	bx	lr
